name: Build and Deploy MidnightOS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BOARD: "amd64-generic"
  BUILD_TYPE: "midnight-ui"
  SF_USER: "spoinkoscdn"
  SF_PROJECT: "MidnightOS"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 480

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create build context
      run: |
        mkdir -p docker-build
        
        # Create Dockerfile for ChromeOS build environment with UI theme support
        cat > docker-build/Dockerfile << 'EOF'
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install build dependencies
RUN apt-get update && apt-get install -y \
    git curl wget python3 python3-pip build-essential \
    sudo locales ca-certificates gnupg lsb-release \
    unzip xz-utils bc bison flex libssl-dev \
    libncurses5-dev u-boot-tools device-tree-compiler \
    gcc-multilib g++-multilib libc6-dev-i386 \
    lib32ncurses5-dev lib32z1-dev zlib1g-dev \
    libelf-dev libdbus-1-dev libbluetooth-dev \
    libnss3-dev fonts-liberation libasound2-dev \
    imagemagick fontconfig sshpass rsync \
    fonts-liberation ttf-dejavu-core \
    inkscape gimp librsvg2-bin optipng \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Google Fonts and dark theme fonts
RUN wget -O /tmp/roboto.zip https://fonts.google.com/download?family=Roboto \
    && unzip /tmp/roboto.zip -d /usr/share/fonts/truetype/roboto/ \
    && rm /tmp/roboto.zip \
    && wget -O /tmp/material-icons.woff2 https://fonts.gstatic.com/s/materialicons/v140/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2 \
    && mkdir -p /usr/share/fonts/woff2/ \
    && mv /tmp/material-icons.woff2 /usr/share/fonts/woff2/ \
    && fc-cache -fv

# Create build user
RUN useradd -m -s /bin/bash -G sudo builder \
    && echo 'builder ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Install depot_tools
RUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /opt/depot_tools

# Switch to builder user early for non-root setup
USER builder
WORKDIR /home/builder

# Set up environment
ENV PATH="/opt/depot_tools:$PATH"
RUN git config --global user.name "MidnightOS Builder" \
    && git config --global user.email "christopher.fox@wolfos.uk" \
    && git config --global color.ui auto

# Create working directories and ensure ownership (secure non-root fix)
RUN mkdir -p /home/builder/{chromeos-build,artifacts,branding,logs,themes} \
    && sudo chown -R builder:builder /home/builder /opt/depot_tools \
    && chmod -R 755 /home/builder

# Build script
COPY build.sh /home/builder/build.sh
RUN chmod +x /home/builder/build.sh

CMD ["/home/builder/build.sh"]
EOF

        # Create comprehensive build script with midnight theme and full UI/UX overhaul
        cat > docker-build/build.sh << 'EOF'
#!/bin/bash
set -e

export BOARD="amd64-generic"
export PATH="/opt/depot_tools:$PATH"

# Secure non-root permission setup (initial only)
echo "=== Setting up directories with proper non-root permissions ==="
sudo chown -R $(whoami):$(whoami) /home/builder
chmod -R 755 /home/builder/chromeos-build /home/builder/logs /home/builder/artifacts
mkdir -p /home/builder/logs

echo "=== Generating MidnightOS Dark UI Assets (Extended) ==="
cd /home/builder/branding

# Midnight color scheme (MD3-inspired)
MIDNIGHT_PRIMARY="#0F0F0F"
MIDNIGHT_SECONDARY="#1A1A1A"
MIDNIGHT_ACCENT="#6366F1"
MIDNIGHT_TEXT="#E5E5E5"
MIDNIGHT_SURFACE="#121212"
MIDNIGHT_ERROR="#EF4444"
MIDNIGHT_WARNING="#F59E0B"
MIDNIGHT_SUCCESS="#10B981"

# Generate main logo (800x200)
convert -size 800x200 xc:"$MIDNIGHT_PRIMARY" \
  -fill "$MIDNIGHT_TEXT" -font "Roboto-Bold" -pointsize 48 \
  -gravity center -annotate +0-10 "MidnightOS" \
  -fill "$MIDNIGHT_ACCENT" -font "Roboto-Light" -pointsize 20 \
  -gravity center -annotate +0+25 "MIDNIGHT EDITION" \
  midnight-logo.png

# Generate boot splash (1920x1080) with gradient and elements
convert -size 1920x1080 gradient:"$MIDNIGHT_PRIMARY"-"$MIDNIGHT_SECONDARY" \
  \$ -size 400x400 xc:transparent \
     -fill "$MIDNIGHT_ACCENT" -draw "circle 200,200 200,100" \
     -blur 0x50 \$ -gravity center -composite \
  -fill "$MIDNIGHT_TEXT" -font "Roboto-Thin" -pointsize 64 \
  -gravity center -annotate +0-80 "MidnightOS" \
  -fill "$MIDNIGHT_ACCENT" -font "Roboto-Light" -pointsize 24 \
  -gravity center -annotate +0-20 "Dark Modern Private" \
  -fill "$MIDNIGHT_TEXT" -font "Roboto-Regular" -pointsize 16 \
  -gravity center -annotate +0+40 "ChromeOS reimagined for the night" \
  boot-splash.png

# Generate modern icons (multiple sizes, rounded MD3 style)
mkdir -p icons
for size in 16 32 48 64 128 256; do
  convert -size ${size}x${size} xc:"$MIDNIGHT_SURFACE" \
    -fill "$MIDNIGHT_ACCENT" -draw "roundrectangle 2,2 $((size-2)),$((size-2)) 8,8" \
    -fill "$MIDNIGHT_TEXT" -font "Roboto-Bold" -pointsize $((size/3)) \
    -gravity center -annotate +0+0 "M" \
    icons/midnight-${size}.png
done

# Generate extended wallpaper collection (MD3 dynamic-inspired)
mkdir -p wallpapers

# Main midnight wallpaper (gradient with subtle elements)
convert -size 1920x1080 gradient:"$MIDNIGHT_PRIMARY"-"$MIDNIGHT_SECONDARY" \
  \$ -size 1920x1080 xc:transparent \
     -fill "$MIDNIGHT_ACCENT" -draw "circle 1500,200 1600,100" \
     -blur 0x100 -channel A -evaluate multiply 0.3 +channel \$ -composite \
  \$ -size 1920x1080 xc:transparent \
     -fill "$MIDNIGHT_TEXT" -draw "circle 400,800 500,700" \
     -blur 0x80 -channel A -evaluate multiply 0.1 +channel \$ -composite \
  wallpapers/midnight-default.jpg

# Abstract geometric (triangles, MD3 shapes)
convert -size 1920x1080 xc:"$MIDNIGHT_PRIMARY" \
  \$ -size 1920x1080 xc:transparent \
     -fill "$MIDNIGHT_ACCENT" -draw "polygon 0,0 600,0 300,400" \
     -blur 0x40 -channel A -evaluate multiply 0.4 +channel \$ -composite \
  \$ -size 1920x1080 xc:transparent \
     -fill "$MIDNIGHT_SECONDARY" -draw "polygon 1920,1080 1320,1080 1620,680" \
     -blur 0x60 -channel A -evaluate multiply 0.6 +channel \$ -composite \
  wallpapers/midnight-geometric.jpg

# Minimalist dots (subtle pattern)
convert -size 1920x1080 xc:"$MIDNIGHT_SURFACE" \
  -fill "$MIDNIGHT_ACCENT" -draw "circle 960,340 980,320" \
  -fill "$MIDNIGHT_TEXT" -draw "circle 960,540 970,530" \
  -fill "$MIDNIGHT_ACCENT" -draw "circle 960,740 975,725" \
  -blur 0x2 \
  wallpapers/midnight-minimal.jpg

# High-contrast variant for accessibility
convert -size 1920x1080 xc:"$MIDNIGHT_PRIMARY" \
  -fill "$MIDNIGHT_ACCENT" -draw "rectangle 0,0 1920,540" \
  -fill "$MIDNIGHT_SECONDARY" -draw "rectangle 0,540 1920,1080" \
  -fill "$MIDNIGHT_TEXT" -font "Roboto-Bold" -pointsize 72 \
  -gravity center -annotate +0+0 "MidnightOS" \
  wallpapers/midnight-high-contrast.jpg

# Generate custom cursors (simple dark theme, 32x32)
mkdir -p cursors
for cursor in default pointer text; do
  convert -size 32x32 xc:"$MIDNIGHT_PRIMARY" \
    -fill "$MIDNIGHT_ACCENT" -draw "line 8,8 24,24" \
    cursors/midnight-${cursor}.png
done

# Generate boot animation frames (simple fade, 5 frames)
mkdir -p boot-frames
for i in {1..5}; do
  opacity=$((i * 20))
  convert -size 1920x1080 xc:"$MIDNIGHT_PRIMARY" \
    -fill "$MIDNIGHT_ACCENT" -font "Roboto-Bold" -pointsize 64 \
    -gravity center -annotate +0+0 "MidnightOS" \
    -channel A -evaluate multiply $opacity/100 \
    boot-frames/frame-${i}.png
done

# Create extensive theme configuration (expanded for full overhaul)
mkdir -p config themes

cat > config/midnight-branding.conf << 'BEOF'
[branding]
name=MidnightOS
full_name=MidnightOS Midnight Edition
version=1.0
description=Dark ChromeOS Distribution with Modern UI Overhaul
homepage=https://sourceforge.net/projects/midnightos/
support_url=https://sourceforge.net/projects/midnightos/support

[theme]
theme_name=midnight
primary_color=#0F0F0F
secondary_color=#1A1A1A
accent_color=#6366F1
text_color=#E5E5E5
surface_color=#121212
error_color=#EF4444
warning_color=#F59E0B
success_color=#10B981
info_color=#3B82F6

[appearance]
dark_mode=true
auto_dark_web_content=true
material_you=true
dynamic_colors=true
font_family=Roboto
logo_path=midnight-logo.png
wallpaper_collection=wallpapers/
icon_theme=midnight
cursor_theme=midnight
boot_animation=midnight
shelf_floating=true
shelf_transparent=0.95
window_rounded_corners=12
blur_effects=true
animations=enhanced
BEOF

cat > config/midnight-customizations.json << 'BEOF'
{
  "system_name": "MidnightOS",
  "theme_name": "Midnight Edition",
  "welcome_message": "Welcome to MidnightOS - ChromeOS reimagined for the night",
  "startup_sound": true,
  "boot_animation": "midnight",
  "default_wallpaper": "wallpapers/midnight-default.jpg",
  "wallpaper_rotation": true,
  "telemetry_disabled": true,
  "crash_reporting": false,
  "usage_stats": false,
  "dark_mode": {
    "enabled": true,
    "force_dark_web_content": true,
    "auto_dark_mode": true,
    "dark_scrollbars": true,
    "dark_cursors": true
  },
  "ui_customizations": {
    "theme": "midnight",
    "shelf_style": "floating",
    "shelf_color": "#121212",
    "shelf_transparency": 0.95,
    "status_area_color": "#E5E5E5",
    "window_frame_color": "#1A1A1A",
    "accent_color": "#6366F1",
    "corner_radius": 12,
    "blur_effects": true,
    "animations": "enhanced",
    "material_you": true,
    "dynamic_colors": true,
    "notification_style": "md3",
    "launcher_background": "#0F0F0F",
    "overview_mode": "dark_blur"
  },
  "chrome_flags": [
    "--force-dark-mode",
    "--enable-features=WebUIDarkMode,ChromeRefresh2023,DarkModeForWebContents",
    "--dark-mode-settings",
    "--enable-blink-features=CSSColorSchemeUARendering,DarkMode",
    "--ash-enable-unified-desktop",
    "--enable-wayland-server",
    "--ozone-platform=wayland"
  ]
}
BEOF

# Create Material Design 3 theme files (expanded for Ash/Chromium)
cat > themes/material-midnight.css << 'BEOF'
/* MidnightOS Material Design 3 Theme - Full UI Overhaul */
:root {
  --md-sys-color-primary: #6366F1;
  --md-sys-color-on-primary: #FFFFFF;
  --md-sys-color-primary-container: #1E1B4B;
  --md-sys-color-on-primary-container: #E5E7EB;
  --md-sys-color-secondary: #A855F7;
  --md-sys-color-on-secondary: #FFFFFF;
  --md-sys-color-secondary-container: #581C87;
  --md-sys-color-on-secondary-container: #F3E8FF;
  --md-sys-color-surface: #0F0F0F;
  --md-sys-color-on-surface: #E5E5E5;
  --md-sys-color-surface-variant: #1A1A1A;
  --md-sys-color-on-surface-variant: #D1D5DB;
  --md-sys-color-background: #0F0F0F;
  --md-sys-color-on-background: #E5E5E5;
  --md-sys-color-error: #EF4444;
  --md-sys-color-on-error: #FFFFFF;
  --md-sys-color-outline: #9CA3AF;
  --md-sys-color-shadow: #000000;
  --md-sys-elevation-level1: 0 1px 3px 0 var(--md-sys-color-shadow);
  --md-sys-elevation-level2: 0 2px 8px 0 var(--md-sys-color-shadow);
  --md-sys-typescale-display-large-font: "Roboto", sans-serif;
  --md-sys-typescale-display-large-size: 57px;
  --md-sys-shape-corner-large: 16
px;
  --md-sys-shape-corner-medium: 12px;
  --md-sys-shape-corner-small: 8px;
}

/* Ash Window Manager Overhaul (Shelf, Overview, Launcher) */
.ash-shelf {
  background: var(--md-sys-color-surface-variant) !important;
  backdrop-filter: blur(20px);
  border-radius: 16px;
  box-shadow: var(--md-sys-elevation-level2);
  opacity: 0.95;
}

.ash-shelf-button {
  background: transparent;
  border-radius: 50%;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.ash-shelf-button:hover {
  background: var(--md-sys-color-primary-container);
  transform: scale(1.05);
}

.ash-overview {
  background: linear-gradient(135deg, var(--md-sys-color-background), var(--md-sys-color-surface));
  backdrop-filter: blur(10px);
}

.ash-window-frame {
  border-radius: var(--md-sys-shape-corner-large);
  box-shadow: var(--md-sys-elevation-level1);
  background: var(--md-sys-color-surface);
}

/* Notification and Dialog Styles */
.ash-notification {
  background: var(--md-sys-color-surface-variant);
  border-radius: var(--md-sys-shape-corner-medium);
  border-left: 4px solid var(--md-sys-color-primary);
  box-shadow: var(--md-sys-elevation-level2);
}

.ash-dialog {
  background: var(--md-sys-color-surface);
  border-radius: var(--md-sys-shape-corner-large);
  backdrop-filter: blur(15px);
}

/* Launcher and App List */
.ash-launcher {
  background: var(--md-sys-color-background);
  border-radius: var(--md-sys-shape-corner-large);
  box-shadow: var(--md-sys-elevation-level1);
}

.ash-app-icon {
  filter: drop-shadow(0 2px 4px var(--md-sys-color-shadow));
  border-radius: 12px;
}

/* Chromium Browser Overrides (Dark Mode, MD3) */
#browser-toolbar {
  background: var(--md-sys-color-surface-variant) !important;
  border-bottom: 1px solid var(--md-sys-color-outline);
}

#omnibox {
  background: var(--md-sys-color-surface) !important;
  border-radius: var(--md-sys-shape-corner-medium);
  color: var(--md-sys-color-on-surface) !important;
}

.tab-strip {
  background: var(--md-sys-color-background) !important;
  border-radius: var(--md-sys-shape-corner-small)  var(--md-sys-shape-corner-small) 0 0;
}

.tab {
  background: var(--md-sys-color-surface-variant) !important;
  border-radius: var(--md-sys-shape-corner-medium);
  color: var(--md-sys-color-on-surface-variant) !important;
}

.tab:hover {
  background: var(--md-sys-color-primary-container) !important;
}

/* NTP and Web Content Dark Mode */
#newtab-page {
  background: var(--md-sys-color-background) !important;
  color: var(--md-sys-color-on-background) !important;
}

body {
  color-scheme: dark !important;
  background: var(--md-sys-color-background) !important;
  color: var(--md-sys-color-on-background) !important;
}

/* Scrollbars and Animations */
::-webkit-scrollbar {
  width: 8px;
  background: var(--md-sys-color-surface-variant);
}

::-webkit-scrollbar-thumb {
  background: var(--md-sys-color-outline);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--md-sys-color-primary);
}

/* Enhanced Animations (Cubic Bezier for MD3) */
* {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* High-DPI Scaling and Blur Effects */
@media (min-resolution: 2dppx) {
  .ash-shelf {
    backdrop-filter: blur(30px);
  }
}
BEOF

# Create custom sound files (simple tones for boot/login)
mkdir -p sounds
# Boot sound (low tone)
sox -n -t raw -r 8000 -e unsigned -b 8 -c 1 sounds/boot.raw synth 0.5 sin 200
# Login sound (higher tone)
sox -n -t raw -r 8000 -e unsigned -b 8 -c 1 sounds/login.raw synth 0.3 sin 400

echo "=== Setting up OpenFyde and Theming Overlays ==="
cd /home/builder/chromeos-build

# Verify permissions before repo
if [ ! -w /home/builder/chromeos-build ]; then
  echo "ERROR: Build dir not writable. Fixing..."
  sudo chown -R $(whoami):$(whoami) /home/builder/chromeos-build
  chmod 755 /home/builder/chromeos-build
fi
ls -la /home/builder/chromeos-build > /home/builder/logs/permissions-check.log

echo "=== Initializing ChromiumOS repository (non-root) ==="
repo init -u https://chromium.googlesource.com/chromiumos/manifest.git \
  --repo-url https://chromium.googlesource.com/external/repo.git \
  -g minilayout > /home/builder/logs/repo-init.log 2>&1

repo sync -c -j$(nproc) --force-sync --no-clone-bundle > /home/builder/logs/repo-sync.log 2>&1

echo "=== Cloning OpenFyde and Theming Repos ==="
# OpenFyde base
git clone https://github.com/openFyde/overlay-amd64-openfyde.git src/private-overlays/overlay-amd64-openfyde
git clone https://github.com/openFyde/chromiumos-overlay.git src/private-overlays/overlay-openfyde

# Additional theming repos (research-based: Ash for UI, Gentoo for GTK/Qt)
git clone https://chromium.googlesource.com/chromiumos/platform/ash.git src/third_party/ash-midnight-fork
git clone https://github.com/gentoo/gentoo.git src/private-overlays/overlay-gentoo-themes  # For GTK/Qt dark themes

# Custom MidnightOS overlay structure (full UI/UX overhaul)
mkdir -p src/private-overlays/overlay-midnightos/chromeos-base/{chromeos-branding,chromeos-ash,chromeos-assets,midnight-policies}
mkdir -p src/private-overlays/overlay-midnightos/media-themes/{gtk-qt-themes,midnight-sounds}
mkdir -p src/private-overlays/overlay-midnightos/profiles/base

# Copy branding assets to overlay
cp -r /home/builder/branding/* src/private-overlays/overlay-midnightos/chromeos-base/chromeos-branding/files/ 2>/dev/null || true

echo "=== Creating Custom Ebuilds for Full UI Overhaul ==="

# Enhanced chromeos-branding ebuild (integrates assets, policies)
cat > src/private-overlays/overlay-midnightos/chromeos-base/chromeos-branding/chromeos-branding-9999.ebuild << 'BEOF'
# Copyright 2025 MidnightOS Project
# Distributed under the terms of the GNU General Public License v2

EAPI=7
inherit cros-workon

CROS_WORKON_PROJECT="chromiumos/platform2"
CROS_WORKON_LOCALNAME="platform2"
CROS_WORKON_SUBTREE="chromeos-branding"

DESCRIPTION="MidnightOS ChromeOS branding - Full Dark UI/UX Overhaul without telemetry"
HOMEPAGE="https://sourceforge.net/projects/midnightos/"

LICENSE="BSD-Google"
KEYWORDS="*"
SLOT="0"

RDEPEND="chromeos-base/chromeos-assets
         media-fonts/roboto
         media-themes/midnight-sounds
         chromeos-base/midnight-policies"

src_install() {
    # Install branding assets
    insinto /usr/share/chromeos-assets/images
    doins "${S}"/files/midnight-logo.png
    doins "${S}"/files/boot-splash.png
    doins "${S}"/files/boot-frames/*.png

    # Install wallpaper collection
    insinto /usr/share/chromeos-assets/wallpapers
    doins "${S}"/files/wallpapers/*.jpg

    # Install icons and cursors
    insinto /usr/share/icons/midnight
    doins "${S}"/files/icons/midnight-*.png
    doins "${S}"/files/cursors/*.png

    # Install sounds
    insinto /usr/share/sounds
    doins "${S}"/files/sounds/*.raw

    # Install Chrome branding
    insinto /opt/google/chrome
    newins "${S}"/files/midnight-logo.png product_logo.png

    # Install theme files
    insinto /usr/share/themes/midnight
    doins "${S}"/files/themes/material-midnight.css
    doins "${S}"/files/config/midnight-branding.conf
    doins "${S}"/files/config/midnight-customizations.json

    # Force dark mode and UX policies
    insinto /etc/chrome/policies/managed
    doins "${FILESDIR}"/midnight-dark-mode.json
    doins "${FILESDIR}"/midnight-ux-overhaul.json

    # Disable telemetry
    insinto /etc/init
    newins "${FILESDIR}"/no-telemetry.conf telemetry.override
}
BEOF

# New ebuild: chromeos-ash-midnight (Ash window manager overhaul)
cat > src/private-overlays/overlay-midnightos/chromeos-base/chromeos-ash/chromeos-ash-9999.ebuild << 'BEOF'
# Copyright 2025 MidnightOS Project

EAPI=7
inherit cros-workon

DESCRIPTION="MidnightOS Ash - Dark MD3 Window Manager Overhaul"
HOMEPAGE="https://sourceforge.net/projects/midnightos/"

LICENSE="BSD-Google"
KEYWORDS="*"

DEPEND="chromeos-base/chromeos-assets
        media-fonts/roboto"

src_prepare() {
    # Patch Ash for midnight theme (shelf, overview, animations)
    sed -i 's/kThemeColor::kLightBlue/#6366F1/g' "${S}"/ash/public/cpp/ash_features.cc  # Accent color
    sed -i 's/background_color: kDefaultBackground/#0F0F0F/g' "${S}"/ash/resources/default_theme.css  # Dark bg
    # Enable Wayland, blur, rounded corners
    echo 'USE_FLAGS="wayland blur_effects rounded_corners md3"' >> "${S}"/makefile
}

src_install() {
    # Install custom Ash resources
    insinto /usr/share/ash/resources
    doins "${S}"/midnight-theme-resources.json  # Custom JSON for shelf/launcher

    # MD3 CSS integration
    insinto /usr/share/ash/themes
    doins "${FILESDIR}"/material-midnight.css

    # Enable features via config
    insinto /etc/ash
    newins "${FILESDIR}"/midnight-ash.conf ash.conf
}
BEOF

# midnight-assets ebuild (extended icons, cursors, wallpapers)
cat > src/private-overlays/overlay-midnightos/chromeos-base/chromeos-assets/midnight-assets-1.0.ebuild << 'BEOF'
EAPI=7

DESCRIPTION="MidnightOS Assets - Icons, Cursors, Wallpapers for UI Overhaul"
HOMEPAGE="https://sourceforge.net/projects/midnightos/"

LICENSE="BSD"
SLOT="0"

src_install() {
    insinto /usr/share/icons/midnight/cursors
    doins "${S}"/files/cursors/*.png

    insinto /usr/share/themes/midnight/icons
    doins "${S}"/files/icons/*.png

    # Dynamic wallpaper support
    insinto /usr/share/wallpapers/midnight
    doins "${S}"/files/wallpapers/*.jpg

    # Cursor theme config
    insinto /usr/share/icons/midnight
    newins "${FILESDIR}"/index.theme index.theme
}
BEOF

# midnight-policies ebuild (JSON policies for dark mode, UX)
mkdir -p src/private-overlays/overlay-midnightos/chromeos-base/midnight-policies/files
cat > src/private-overlays/overlay-midnightos/chromeos-base/midnight-policies/midnight-policies-1.0.ebuild << 'BEOF'
EAPI=7

DESCRIPTION="MidnightOS Policies - Dark Mode, Animations, Wayland UX Overhaul"
HOMEPAGE="https://sourceforge.net/projects/midnightos/"

LICENSE="BSD"
SLOT="0"

src_install() {
    insinto /etc/chrome/policies/managed
    doins "${FILESDIR}"/midnight-dark-mode.json
    doins "${FILESDIR}"/midnight-ux-overhaul.json
    doins "${FILESDIR}"/midnight-wayland.json
}
BEOF

# Create policy files
cat > src/private-overlays/overlay-midnightos/chromeos-base/midnight-policies/files/midnight-dark-mode.json << 'BEOF'
{
  "DarkModeEnabled": true,
  "ForceDarkModeForWebContents": true,
  "AutoDarkModeForWebContents": true,
  "BrowserThemeColor": "#0F0F0F",
  "NTPBackgroundImage": "/usr/share/wallpapers/midnight/midnight-default.jpg",
  "WallpaperRotationEnabled": true,
  "DarkScrollbars": true,
  "HighContrastMode": false
}
BEOF

cat > src/private-overlays/overlay-midnightos/chromeos-base/midnight-policies/files/midnight-ux-overhaul.json << 'BEOF'
{
  "ShelfAlignment": "bottom",
  "ShelfBackgroundColor": "#121212",
  "ShelfTransparency": 0.95,
  "WindowCornerRadius": 12,
  "AnimationDuration": "fast",
  "BlurEffectEnabled": true,
  "MaterialDesign3": true,
  "DynamicColorTheme": true,
  "OverviewBackgroundBlur": 20,
  "LauncherIconSize": 48,
  "NotificationDuration": 5000,
  "AccessibilityHighContrast": false
}
BEOF

cat > src/private-overlays/overlay-midnightos/chromeos-base/midnight-policies/files/midnight-wayland.json << 'BEOF'
{
  "OzonePlatform": "wayland",
  "EnableWaylandServer": true,
  "UseOzonePlatform": true,
  "HardwareAccelerationMode": "vaapi",
  "VulkanEnabled": true,
  "CompositorBlur": true
}
BEOF

# GTK/Qt themes ebuild (for Crostini/Linux apps consistency)
cat > src/private-overlays/overlay-midnightos/media-themes/gtk-qt-themes/gtk-qt-themes-1.0.ebuild << 'BEOF'
EAPI=7

DESCRIPTION="MidnightOS GTK/Qt Dark Themes for Linux Apps"
HOMEPAGE="https://sourceforge.net/projects/midnightos/"

LICENSE="GPL-2"
SLOT="0"
IUSE="gtk qt"

RDEPEND="gtk? ( x11-themes/gtk-engines )
         qt? ( dev-qt/qtgui:5 )"

src_install() {
    if use gtk; then
        insinto /usr/share/themes/Midnight-GTK
        doins "${S}"/midnight-gtk.css
        # Dark GTK config
        echo '[Settings]
gtk-theme-name=Midnight-GTK
gtk-application-prefer-dark-theme=true' > "${D}"/usr/share/gtk-3.0/settings.ini
    fi

    if use qt; then
        insinto /usr/share/qt5ct/qt5ct.conf
        echo 'theme=midnight-qt' > "${D}"/usr/share/qt5ct/qt5ct.conf
    fi
}
BEOF

# Midnight sounds ebuild
cat > src/private-overlays/overlay-midnightos/media-themes/midnight-sounds/midnight-sounds-1.0.ebuild << 'BEOF'
EAPI=7

DESCRIPTION="MidnightOS System Sounds"
HOMEPAGE="https://sourceforge.net/projects/midnightos/"

LICENSE="BSD"
SLOT="0"

src_install() {
    insinto /usr/share/sounds/midnight
    doins "${S}"/files/sounds/*.raw

    # Boot/login config
    insinto /etc
    doins "${FILESDIR}"/midnight-sounds.conf
}
BEOF

# Ash config file
cat > src/private-overlays/overlay-midnightos/chromeos-base/chromeos-ash/files/midnight-ash.conf << 'BEOF'
# MidnightOS Ash Config - UI Overhaul
shelf_background_color=#121212
shelf_corner_radius=16
overview_blur_radius=20
window_border_radius=12
launcher_background=#0F0F0F
animation_easing=cubic-bezier(0.4,0,0.2,1)
enable_blur=true
enable_wayland=true
theme_accent=#6366F1
BEOF

# GTK dark CSS snippet
cat > src/private-overlays/overlay-midnightos/media-themes/gtk-qt-themes/midnight-gtk.css << 'BEOF'
/* Midnight GTK Dark Theme */
* {
  background-color: #0F0F0F;
  color: #E5E5E5;
  border-color: #1A1A1A;
}

button {
  background-color: #121212;
  border-radius:  12px;
  border: 1px solid #1A1A1A;
  color: #E5E5E5;
}

button:hover {
  background-color: #1A1A1A;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

entry {
  background-color: #121212;
  border: 1px solid #1A1A1A;
  border-radius: 8px;
  color: #E5E5E5;
  padding: 8px;
}

window {
  background-color: #0F0F0F;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

menu {
  background-color: #121212;
  border-radius: 8px;
  color: #E5E5E5;
}

menuitem {
  padding: 8px 16px;
  border-radius: 6px;
}

menuitem:hover {
  background-color: #1A1A1A;
}

/* Scrollbars */
scrollbar {
  background-color: #0F0F0F;
  border-radius: 4px;
}

scrollbar slider {
  background-color: #6366F1;
  border-radius: 4px;
  min-width: 8px;
}

/* MD3 Elevation and Animations */
headerbar {
  background-color: #121212;
  border-radius: 12px 12px 0 0;
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
BEOF

# Qt theme config (basic dark setup)
cat > src/private-overlays/overlay-midnightos/media-themes/gtk-qt-themes/midnight-qt.conf << 'BEOF'
[Theme]
style=midnight
color_scheme=dark
accent_color=#6366F1
background_color=#0F0F0F
text_color=#E5E5E5
BEOF

# Telemetry disable config
cat > src/private-overlays/overlay-midnightos/chromeos-base/chromeos-branding/files/no-telemetry.conf << 'BEOF'
# Disable all telemetry and reporting
start telemetry-collector {
  start on stopped rcS
  stop on runlevel [016]
  respawn
  exec /bin/true  # No-op to disable
}
BEOF

echo "=== Configuring MidnightOS Overlay in Manifest ==="
# Add MidnightOS overlay to profiles/base
echo 'overlay-midnightos' >> src/overlays.csv
echo 'private-overlays/overlay-midnightos' >> src/private-overlays/overlays.csv

# Local manifest for custom repos
cat > .repo/local_manifests/midnight.xml << 'BEOF'
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remote name="midnight" fetch="https://github.com/yourusername/midnightos-overlays" />
  <project name="midnightos-overlays" path="src/private-overlays/overlay-midnightos" remote="midnight" revision="main" />
</manifest>
BEOF

# Update packages in base profile
echo 'chromeos-base/chromeos-branding' >> src/private-overlays/overlay-midnightos/profiles/base/packages
echo 'chromeos-base/chromeos-ash' >> src/private-overlays/overlay-midnightos/profiles/base/packages
echo 'chromeos-base/midnight-assets' >> src/private-overlays/overlay-midnightos/profiles/base/packages
echo 'chromeos-base/midnight-policies' >> src/private-overlays/overlay-midnightos/profiles/base/packages
echo 'media-themes/midnight-sounds' >> src/private-overlays/overlay-midnightos/profiles/base/packages
echo 'media-themes/gtk-qt-themes' >> src/private-overlays/overlay-midnightos/profiles/base/packages

repo sync -c -j$(nproc) > /home/builder/logs/post-overlay-sync.log 2>&1

echo "=== Entering cros_sdk Chroot (Non-Root Setup) ==="
# Verify chroot dir writable
mkdir -p src/build
if [ ! -w src/build ]; then
  echo "Fixing chroot permissions..."
  sudo chown -R $(whoami):chronos src/build /home/builder/chromeos-build/src
  chmod -R 775 src/build
fi
ls -la src/build > /home/builder/logs/chroot-permissions.log

# Create and enter SDK as non-root (cros_sdk handles user/group)
cros_sdk --create --no-enable-updates || true  # Idempotent
cros_sdk --enter --cmd="
  set -e

  # Inside chroot: Fix permissions for build/logs (chronos group standard)
  sudo chown -R root:chronos /build /mnt/host/source/src/build
  sudo chmod -R 775 /build /mnt/host/source/src/build
  sudo usermod -a -G chronos \$(whoami)

  export BOARD=amd64-generic
  export ARGS='--board=${BOARD}'

  echo '=== Setting up board in chroot ===' > /mnt/host/source/src/build/logs/setup-board.log

  setup_board --board=\${BOARD} --force >> /mnt/host/source/src/build/logs/setup-board.log 2>&1

  echo '=== Emerging MidnightOS Theming Packages ===' >> /mnt/host/source/src/build/logs/emerge.log

  # Emerge core theming with MidnightOS overlay
  emerge-${BOARD} --quiet-build y chromeos-base/chromeos-branding >> /mnt/host/source/src/build/logs/emerge-branding.log 2>&1
  emerge-${BOARD} --quiet-build y chromeos-base/chromeos-ash >> /mnt/host/source/src/build/logs/emerge-ash.log 2>&1
  emerge-${BOARD} --quiet-build y chromeos-base/midnight-assets >> /mnt/host/source/src/build/logs/emerge-assets.log 2>&1
  emerge-${BOARD} --quiet-build y chromeos-base/midnight-policies >> /mnt/host/source/src/build/logs/emerge-policies.log 2>&1
  emerge-${BOARD} --quiet-build y media-themes/midnight-sounds >> /mnt/host/source/src/build/logs/emerge-sounds.log 2>&1
  emerge-${BOARD} --quiet-build y media-themes/gtk-qt-themes >> /mnt/host/source/src/build/logs/emerge-themes.log 2>&1

  # Emerge OpenFyde base and UI essentials
  emerge-${BOARD} --quiet-build y chromeos-base/chromeos >> /mnt/host/source/src/build/logs/emerge-chromeos.log 2>&1

  echo '=== Building MidnightOS Image with UI Overhaul ===' >> /mnt/host/source/src/build/logs/build-image.log

  # Build image with custom flags for theming/Wayland
  build_image --board=\${BOARD} \
    --config='midnight-ui' \
    --enable-wayland \
    --enable-md3-theme \
    --disable-telemetry \
    --image='midnightos' \
    --output_root='/build/images' \
    --skip_gmerge \
    --skip_chroot_upgrade \
    --skip_board_setup \
    --skip_image_deps \
    --skip_toolchain_update \
    --skip_vm_tests \
    --skip_unibuild \
    >> /mnt/host/source/src/build/logs/build-image.log 2>&1

  # Verify build output
  if [ -f /build/images/${BOARD}/latest/full_payload.bin ]; then
    echo 'Build successful!' >> /mnt/host/source/src/build/logs/build-success.log
    cp /build/images/${BOARD}/latest/*.bin /mnt/host/source/src/build/images/
  else
    echo 'Build failed - check logs' >> /mnt/host/source/src/build/logs/build-fail.log
    exit 1
  fi
"

echo "=== Extracting Artifacts and Generating Release ==="
# Copy images and logs from chroot to artifacts (non-root)
cp -r src/build/images/* /home/builder/artifacts/ 2>/dev/null || true
cp -r src/build/logs/* /home/builder/logs/ 2>/dev/null || true

# Copy themed files to artifacts
cp -r /home/builder/branding/* /home/builder/artifacts/themed-files/ 2>/dev/null || true
cp -r src/private-overlays/overlay-midnightos/* /home/builder/artifacts/overlays/ 2>/dev/null || true

# Generate release info (no emojis)
cd /home/builder/artifacts
cat > release-info.txt << EOF
MidnightOS Build Information
============================

Build Date: $(date)
Board: amd64-generic
Build Type: Midnight UI Overhaul Edition
Version: 1.0

Key Features:
- Full Dark Mode: System-wide dark theme with auto-dark web content.
- Material Design 3: Dynamic colors, rounded corners, blur effects, enhanced animations.
- Ash Overhaul: Floating transparent shelf, blurred overview, MD3 notifications and launcher.
- Custom Assets: Midnight wallpapers, icons, cursors, boot animation, and sounds.
- UX Enhancements: Wayland compositor for smooth UI, high-DPI scaling, accessibility dark variant.
- App Consistency: GTK/Qt dark themes for Crostini and Linux apps.
- Privacy: All telemetry and crash reporting disabled.
- Base: ChromiumOS with OpenFyde extensions.

Image Files:
- full_payload.bin: Complete recovery image (flash via Chromebook Recovery Utility).
- recovery_image.bin: Bootable USB image.

Theming Overlays Included:
- chromeos-branding: Custom logos, wallpapers, policies.
- chromeos-ash-midnight: Window manager with MD3 shelf and animations.
- midnight-assets: Icons, cursors, sounds.
- midnight-policies: JSON for dark mode, Wayland, UX tweaks.
- gtk-qt-themes: Dark themes for native apps.

Build Logs: Available in logs/ directory.
Support: https://sourceforge.net/projects/midnightos/support

Generated securely without root execution for build process.
EOF

# Create release ZIP
zip -r midnightos-${BUILD_TYPE}-$(date +%Y%m%d).zip . -x 'logs/*' > /dev/null 2>&1 || true
cp release-info.txt /home/builder/artifacts/

echo "Build complete! Artifacts in /home/builder/artifacts"
ls -la /home/builder/artifacts > /home/builder/logs/final-artifacts.log

EOF

        # Make build.sh executable
        chmod +x docker-build/build.sh

    - name: Build MidnightOS Docker Image
      run: |
        cd docker-build
        docker build -t midnightos-builder .

    - name: Run MidnightOS Build (Secure Non-Root)
      run: |
        cd docker-build
        # Create host dirs for mounts
        mkdir -p ../{artifacts,logs,branding-output}
        
        docker run --rm \
          --name midnightos-build \
          -v "$(pwd)/../artifacts:/home/builder/artifacts:rw" \
          -v "$(pwd)/../logs:/home/builder/logs:rw" \
          -v "$(pwd)/../branding-output:/home/builder/branding:rw" \
          --tmpfs /tmp:rw,noexec,nosuid,size=6g \
          --shm-size=6g \
          --user $(id -u):$(id -g) \
          --memory=8g \
          --cpus=4 \
          midnightos-builder
        
        # Verify artifacts
        if [ -f ../artifacts/release-info.txt ]; then
          echo "Build succeeded! Check artifacts/"
          cat ../artifacts/release-info.txt
        else
          echo "Build failed - check logs/"
          exit 1
        fi

    - name: Upload Artifacts to GitHub Releases
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/midnightos-${{ env.BUILD_TYPE }}-$(date +%Y%m%d).zip
        asset_name: midnightos-${{ env.BUILD_TYPE }}.zip
        asset_content_type: application/zip
      # Note: Assumes a prior 'create_release' step if tagging; adjust as needed

    - name: Deploy to SourceForge
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Install SFTP client if needed
        sudo apt-get update && sudo apt-get install -y lftp
        
        # Upload ZIP and info to SF (assumes SF_PASSWORD secret)
        lftp -u ${{ env.SF_USER }},${{ secrets.SF_PASSWORD }} sftp://frs.sourceforge.net:/home/frs/project/midnightos/MidnightOS/ \
          -e "put artifacts/midnightos-${{ env.BUILD_TYPE }}-$(date +%Y%m%d).zip; put artifacts/release-info.txt; bye"
        
        echo "Deployed to SourceForge: https://sourceforge.net/projects/${{ env.SF_PROJECT }}/files/MidnightOS/"

    - name: Cleanup
      if: always()
      run: |
        docker rm -f midnightos-build || true
        rm -rf docker-build || true

    - name: Archive Logs
      uses: actions/upload-artifact@v4
      with:
        name: midnightos-build-logs
        path: logs/