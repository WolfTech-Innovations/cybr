name: Build and Deploy MidnightOS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BOARD: "amd64-openfyde"
  BUILD_TYPE: "midnight-ui"
  CHROMEOS_RELEASE: "release-R102-14695.B"
  SF_USER: "spoinkoscdn"
  SF_PROJECT: "MidnightOS"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 480
    
    steps:
    - name: Maximize disk space
      uses: mkorje/free-disk-space-action@2e7c9816aad6f9d3394a8a5224cebe6622dd7600

    - name: Double space freed 
      uses: endersonmenezes/free-disk-space@713d134e243b926eba4a5cce0cf608bfd1efb89a

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create build ctx
      run: |
        mkdir -p dbld
        
        cat > dbld/Dockerfile << 'EOF'
FROM ubuntu:22.04
ENV DEBIAN_FRONTEND=noninteractive TZ=UTC

RUN apt-get update && apt-get install -y \
    git curl wget python3 python3-pip build-essential sudo locales \
    ca-certificates gnupg lsb-release unzip xz-utils bc bison flex \
    libssl-dev libncurses5-dev u-boot-tools device-tree-compiler \
    gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev \
    lib32z1-dev zlib1g-dev libelf-dev libdbus-1-dev libbluetooth-dev \
    libnss3-dev libasound2-dev imagemagick fontconfig sshpass rsync \
    fonts-liberation fonts-dejavu openssh-client \
    python-pkg-resources python-virtualenv python-oauth2client \
    lvm2 thin-provisioning-tools \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Configure locales
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8

RUN useradd -m -s /bin/bash -G sudo bld && \
    echo 'bld ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
    echo 'Defaults !tty_tickets' >> /etc/sudoers.d/notty && \
    chmod 0440 /etc/sudoers.d/notty

RUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /opt/dt && \
    chown -R bld:bld /opt/dt && chmod -R 755 /opt/dt && \
    echo 'bld ALL=(ALL) NOPASSWD: /opt/dt/repo' >> /etc/sudoers.d/bld-repo && \
    chmod 0440 /etc/sudoers.d/bld-repo

COPY bld.sh /home/bld/bld.sh
RUN chmod +x /home/bld/bld.sh && chown bld:bld /home/bld/bld.sh && \
    mkdir -p /home/bld/{cros,art,log} && chown -R bld:bld /home/bld

USER bld
WORKDIR /home/bld
ENV PATH="/opt/dt:$PATH"
RUN git config --global user.name "MOS" && \
    git config --global user.email "mos@build" && \
    git config --global color.ui auto && \
    umask 022

CMD ["/home/bld/bld.sh"]
EOF

          cat > dbld/bld.sh << 'EOF'
#!/bin/bash
set -e

export BOARD="amd64-openfyde"
export R="release-R102-14695.B"
export PATH="/opt/dt:$PATH"
        
echo "=== MOS Bld Start ==="

# Ensure branding directory exists and has proper permissions
mkdir -p $HOME/bnd/{ic,wp,cfg,thm}
chmod -R 755 $HOME/bnd

# Create branding assets
cd $HOME/bnd
MP="#0F0F0F"; MS="#1A1A1A"; MA="#6366F1"; MT="#E5E5E5"; MSU="#121212"

convert -size 800x200 xc:"$MP" -fill "$MT" -font "DejaVu-Sans-Bold" \
  -pointsize 48 -gravity center -annotate +0-10 "MidnightOS" \
  -fill "$MA" -pointsize 20 -annotate +0+25 "MIDNIGHT" mos-logo.png 2>/dev/null || true

convert -size 1920x1080 gradient:"$MP"-"$MS" -fill "$MT" -pointsize 64 \
  -gravity center -annotate +0-80 "MidnightOS" -fill "$MA" -pointsize 24 \
  -annotate +0-20 "Dark • Modern • Private" boot.png 2>/dev/null || true

mkdir -p wp
convert -size 1920x1080 gradient:"$MP"-"$MS" wp/mos-def.jpg 2>/dev/null || true

cat > cfg/mos.json << 'TH'
{"name":"MOS","v":"1.0","base":"ofyd","board":"amd64-ofyd","thm":{"dm":true,"pc":"#0F0F0F","ac":"#6366F1"},"ft":{"pbc":true,"ig":true,"nt":true}}
TH

# Verify branding assets were created
echo "Branding assets created:"
ls -lah $HOME/bnd/
[ -f "$HOME/bnd/mos-logo.png" ] && echo "✓ Logo exists" || echo "⚠ Logo missing"
[ -f "$HOME/bnd/boot.png" ] && echo "✓ Boot splash exists" || echo "⚠ Boot splash missing"

# Initialize other directories
mkdir -p $HOME/art $HOME/log $HOME/cros

cd $HOME/cros
git config --global color.ui false

echo "Initializing repo..."
sudo -E /opt/dt/repo init -u https://chromium.googlesource.com/chromiumos/manifest.git \
  --repo-url https://chromium.googlesource.com/external/repo.git \
  -b ${R} -g minilayout --depth=1 2>&1 | tee $HOME/log/repo-init.log

if [ ! -d ".repo" ]; then
  echo "ERROR: repo init failed"
  exit 1
fi

sudo chown -R bld:bld .repo

mkdir -p .repo/local_manifests

cat > .repo/local_manifests/ofyd.xml << 'MF'
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remote name="ofyd" fetch="https://github.com/openFyde" />
  <project path="src/overlays/overlay-amd64-openfyde" name="overlay-amd64-openfyde" remote="ofyd" revision="refs/heads/main" />
  <project path="src/overlays/project-openfyde" name="project-openfyde" remote="ofyd" revision="refs/heads/r102-dev" />
</manifest>
MF

cat > .repo/local_manifests/opt.xml << 'OPT'
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remove-project name="chromiumos/platform/tast-tests" />
  <remove-project name="chromiumos/platform/dev-util" />
  <remove-project name="chromiumos/third_party/autotest" />
</manifest>
OPT

sudo mkdir -p /home/bld/log
sudo chmod -R 777 /home/bld/log

sudo -E /opt/dt/repo sync -c -j$(nproc) --fail-fast --force-sync 2>&1 &
SP=$!
while kill -0 $SP 2>/dev/null; do
  echo "Sync $(date +%H:%M:%S) $(du -sh $HOME/cros 2>/dev/null | cut -f1)"
  sleep 60
done
wait $SP

mkdir -p src/overlays/overlay-mos/chromeos-base/{cros-ast,ash-cfg}

# Copy branding with verification
echo "Copying branding assets to overlay..."
if [ -d "$HOME/bnd" ] && [ "$(ls -A $HOME/bnd 2>/dev/null)" ]; then
  cp -rv $HOME/bnd/* src/overlays/overlay-mos/chromeos-base/cros-ast/ 2>&1 || echo "⚠ Branding copy warning"
  
  # Verify copy
  if [ -f "src/overlays/overlay-mos/chromeos-base/cros-ast/mos-logo.png" ]; then
    echo "✓ Branding successfully copied to overlay"
  else
    echo "⚠ Branding files not found in overlay"
  fi
else
  echo "⚠ Branding source directory empty or missing"
fi

mkdir -p src/overlays/overlay-mos/profiles/base
cat > src/overlays/overlay-mos/profiles/base/make.defaults << 'PR'
USE="${USE} openfyde_board-amd64-openfyde intel_graphics intel_hd_graphics intel_audio"
USE="${USE} drm_atomic baytrail_audio vaapi v4l2_codec"
USE="${USE} dark_mode material_design wayland compositor blur_effects"
USE="${USE} vulkan opengl animations gpu_rasterization"
USE="${USE} linux_apps android_apps crostini bluetooth wifi"
USE="${USE} -metrics_collection -crash_reporter -feedback -uma"
USE="${USE} -crash_sender -anomaly_detector -diagnostics"
FEATURES="-test"
CHROMEOS_DEVICE_ID="mos-amd64"
CHROMEOS_VERSION_STRING="MOS"
CHROMEOS_METRICS_ENABLED=0
PR

echo "Setting up board..."
cros_sdk --enter --cmd="setup_board --board=${BOARD} --force" > $HOME/log/sb.log 2>&1

if [ $? -ne 0 ]; then
  echo "ERROR: setup_board failed"
  cat $HOME/log/sb.log | tail -50
  exit 1
fi

echo "Installing capnproto..."
cros_sdk --enter --cmd="sudo emerge capnproto" > $HOME/log/cp.log 2>&1 || {
  echo "⚠ capnproto install warning"
}

echo "Building packages..."
cros_sdk --enter --cmd="
  export BOARD=${BOARD}
  export USE='minimal -autotest dark_mode material_design compositor blur_effects vulkan opengl -metrics_collection -crash_reporter'
  export CHROMEOS_VERSION_STRING='MOS'
  export CHROMEOS_DEVICE_ID='mos-amd64'
  export CHROMEOS_METRICS_ENABLED=0
  
  build_packages --board=\${BOARD} --nowithautotest --autosetgov --nouse_any_chrome
" > $HOME/log/bp.log 2>&1 &

BP=$!
while kill -0 $BP 2>/dev/null; do
  echo "Bld $(date +%H:%M:%S)"
  sleep 120
done
wait $BP
BP_RC=$?

if [ $BP_RC -ne 0 ]; then
  echo "ERROR: build_packages failed with exit code $BP_RC"
  echo "Last 100 lines of build log:"
  tail -100 $HOME/log/bp.log
  
  # Check for common errors
  if grep -q "ERROR.*emerge" $HOME/log/bp.log; then
    echo "Emerge errors detected. Check portage logs:"
    echo "  /build/${BOARD}/tmp/portage/logs/"
  fi
  exit 1
fi

echo "Building system image..."
cros_sdk --enter --cmd="
  export BOARD=${BOARD}
  export CHROMEOS_METRICS_ENABLED=0
  
  build_image --board=\${BOARD} --noenable_rootfs_verification \
    --boot_args='cros_secure quiet dark_mode=1 loglevel=3 splash' dev
" > $HOME/log/bi.log 2>&1

BI_RC=$?
if [ $BI_RC -ne 0 ]; then
  echo "ERROR: build_image failed with exit code $BI_RC"
  echo "Last 50 lines of image build log:"
  tail -50 $HOME/log/bi.log
  exit 1
fi

echo ""
echo "════════════════════════════════════════════════════════════"
echo "  PREPARING RELEASE ARTIFACTS"
echo "════════════════════════════════════════════════════════════"

ARTIFACTS_DIR="$HOME/art"
mkdir -p "${ARTIFACTS_DIR}"

BUILD_DIR="$HOME/cros/src/build/images/$BOARD/latest/"

shopt -s nullglob

if [ -d "${BUILD_DIR}" ]; then
  echo "→ Copying build artifacts from ${BUILD_DIR}..."

  # Check if any files exist before copying
  if ls "${BUILD_DIR}"/*.bin >/dev/null 2>&1 || ls "${BUILD_DIR}"/*.img >/dev/null 2>&1; then
    cp -v "${BUILD_DIR}"/*.bin "${ARTIFACTS_DIR}/" 2>/dev/null || true
    cp -v "${BUILD_DIR}"/*.img "${ARTIFACTS_DIR}/" 2>/dev/null || true
  else
    echo "⚠ WARNING: No .bin or .img files found in ${BUILD_DIR}"
    echo "Contents of build directory:"
    ls -lah "${BUILD_DIR}" || echo "Directory listing failed"
  fi
  
  shopt -u nullglob

  cd "${ARTIFACTS_DIR}"

  # Check if we actually copied any files
  if ! ls *.bin >/dev/null 2>&1 && ! ls *.img >/dev/null 2>&1; then
    echo "🚨 ERROR: No image files were copied to artifacts directory"
    echo "This might indicate a build failure. Check logs:"
    echo "  - $HOME/log/bi.log"
    echo "  - $HOME/log/bp.log"
    exit 1
  fi

  for f in *.bin *.img; do
    if [ -f "$f" ]; then
      nn="MOS-$(date +%Y.%m.%d)-${f}"
      mv "$f" "$nn"
      sha256sum "$nn" > "${nn}.sha256"
      md5sum "$nn" > "${nn}.md5"
      SZ_B=$(stat -c%s "$nn" 2>/dev/null || stat -f%z "$nn" 2>/dev/null)
      SZ_MB=$(echo "scale=2; $SZ_B / 1024 / 1024" | bc -l 2>/dev/null || echo "0")
      echo "  ✓ $nn (${SZ_MB}MB)"
    fi
  done
  
  echo ""
  echo "Final artifacts:"
  ls -lh "${ARTIFACTS_DIR}/"
else
  echo "🚨 ERROR: Build directory not found: ${BUILD_DIR}"
  echo "Build likely failed. Check logs at $HOME/log/"
  exit 1
fi
EOF

      - name: Bld MOS in Docker
        run: |
          cd dbld
          docker build -t mos-bld .
          docker run --privileged --rm --name mos-bld \
            -v "$(pwd)/../art:/home/bld/art" \
            -v "$(pwd)/../log:/home/bld/log" \
            -v "$(pwd)/../bnd:/home/bld/bnd" \
            --tmpfs /tmp:rw,noexec,nosuid,size=8g \
            --shm-size=8g mos-bld

      - name: Verify art
        run: |
        [ -d "art" ] || exit 1
        echo "=== Build Artifacts ==="
        ls -lah art/
        for f in art/*.bin art/*.img; do
          [ -f "$f" ] || continue
          sz=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f" 2>/dev/null || echo "0")
          echo "$(basename "$f"): $((sz/1024/1024))MB"
        done
        
        echo ""
        echo "=== Branding Assets ==="
        if [ -d "bnd" ]; then
          ls -lah bnd/
        else
          echo "⚠ No branding directory found"
        fi

      - name: Prep SF
        if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
        run: |
        sudo apt-get update && sudo apt-get install -y rsync sshpass
        mkdir -p rel
                  [ -d "art" ] && [ "$(ls -A art/)" ] && cp art/* rel/ || exit 1

      - name: Upload SF
        if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
        env:
          SF_PASS: ${{ secrets.SF_PASS }}
        run: |
        [ -z "$SF_PASS" ] && exit 0
        cd rel
        VD="$(date +%Y.%m.%d)"
        sshpass -p "$SF_PASS" rsync -avP -e "ssh -o StrictHostKeyChecking=no" \
                      ./ ${SF_USER}@frs.sourceforge.net:/home/frs/project/${SF_PROJECT}/${VD}/ || true

      - name: Archive log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mos-log-${{ github.run_number }}
          path: log/
          retention-days: 30

      - name: Archive art
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: mos-rel-${{ github.run_number }}
          path: |
            rel/
            art/
          retention-days: 90