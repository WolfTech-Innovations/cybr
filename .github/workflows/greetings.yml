name: "Cybr NextGen Build System"

on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force build failure for testing"
        required: false
        default: "false"
        type: boolean
      build_variant:
        description: "Build variant"
        required: false
        default: "standard"
        type: choice
        options: ["minimal", "standard", "full"]
      skip_upload:
        description: "Skip upload to SourceForge"
        required: false
        default: "false"
        type: boolean
  push:
    branches: [main, develop]
    paths: ['scripts/**', 'config/**', '.github/workflows/build.yml']
  schedule:
    - cron: '0 2 * * 0' # Weekly builds on Sunday 2AM UTC

env:
  DOCKER_BUILDKIT: 1
  BUILDX_CACHE_TO: type=gha,mode=max
  BUILDX_CACHE_FROM: type=gha
  BUILD_VERSION: ${{ github.run_number }}
  ISO_NAME: "cybr-nextgen-v${{ github.run_number }}"

jobs:
  # ============================================================================
  #                           PRE-BUILD VALIDATION
  # ============================================================================
  validate:
    name: "🔍 Pre-Build Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: "ASCII Art Banner"
        run: |
          cat << 'EOF'
          
          ╔═══════════════════════════════════════════════════════════════════════╗
          ║                                                                       ║
          ║    ▄████▄▓██   ██▓ ▄▄▄▄    ██▀███      ▄▄▄▄    █    ██  ██▓ ██▓   ▄▄▄▄   ║
          ║   ▒██▀ ▀█ ▒██  ██▒▓█████▄ ▓██ ▒ ██▒   ▓█████▄  ██  ▓██▒▓██▒▓██▒  ▓█████▄ ║
          ║   ▒▓█    ▄ ▒██ ██░▒██▒ ▄██▓██ ░▄█ ▒   ▒██▒ ▄██▓██  ▒██░▒██▒▒██░  ▒██▒ ▄██║
          ║   ▒▓▓▄ ▄██▒░ ▐██▓░▒██░█▀  ▒██▀▀█▄     ▒██░█▀  ▓▓█  ░██░░██░▒██░  ▒██░█▀  ║
          ║   ▒ ▓███▀ ░░ ██▒▓░░▓█  ▀█▓░██▓ ▒██▒   ░▓█  ▀█▓▒▒█████▓ ░██░░██████▒█  ▀█▓║
          ║   ░ ░▒ ▒  ░ ██▒▒▒ ░▒▓███▀▒░ ▒▓ ░▒▓░   ░▒▓███▀▒░▒▓▒ ▒ ▒ ░▓  ░ ▒░▓  ░▒▓███▀▒║
          ║     ░  ▒  ▓██ ░▒░ ▒░▒   ░   ░▒ ░ ▒░   ▒░▒   ░ ░░▒░ ░ ░  ▒ ░░ ░ ▒  ░▒   ░ ║
          ║   ░       ▒ ▒ ░░   ░    ░   ░░   ░     ░    ░  ░░░ ░ ░  ▒ ░  ░ ░   ░    ░ ║
          ║   ░ ░     ░ ░      ░         ░         ░         ░      ░      ░  ░      ║
          ║   ░       ░ ░           ░                   ░                        ░    ║
          ║                                                                       ║
          ║                    NEXT-GENERATION SECURITY OS BUILDER               ║
          ║                                                                       ║
          ╚═══════════════════════════════════════════════════════════════════════╝
          
          EOF
          
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "Generate Build Hash"
        id: hash
        run: |
          HASH=$(echo "${{ github.sha }}-${{ github.event.inputs.build_variant }}-${{ github.run_number }}" | sha256sum | cut -d' ' -f1 | head -c 16)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Build Hash: $HASH"
          
      - name: "Validation Checks"
        id: check
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          
          echo "┌─────────────────────────────────────────┐"
          echo "│           VALIDATION REPORT             │"
          echo "├─────────────────────────────────────────┤"
          echo "│ Build Variant: ${{ github.event.inputs.build_variant || 'standard' }}"
          echo "│ Force Fail:    ${{ github.event.inputs.force_fail || 'false' }}"
          echo "│ Skip Upload:   ${{ github.event.inputs.skip_upload || 'false' }}"
          echo "│ Build Number:  ${{ github.run_number }}"
          echo "│ Trigger:       ${{ github.event_name }}"
          echo "└─────────────────────────────────────────┘"

  # ============================================================================
  #                              MAIN BUILD JOB
  # ============================================================================
  build:
    name: "🏗️ Build Cybr OS"
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    timeout-minutes: 180
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      iso_size: ${{ steps.iso-info.outputs.size }}
      iso_sha256: ${{ steps.iso-info.outputs.sha256 }}
    
    steps:
      - name: "Build Progress Banner"
        run: |
          cat << 'EOF'
          
          ╔══════════════════════════════════════════════════════════════════════╗
          ║  ██████╗ ██╗   ██╗██╗██╗     ██████╗     ███████╗████████╗ █████╗   ║
          ║  ██╔══██╗██║   ██║██║██║     ██╔══██╗    ██╔════╝╚══██╔══╝██╔══██╗  ║
          ║  ██████╔╝██║   ██║██║██║     ██║  ██║    ███████╗   ██║   ███████║  ║
          ║  ██╔══██╗██║   ██║██║██║     ██║  ██║    ╚════██║   ██║   ██╔══██║  ║
          ║  ██████╔╝╚██████╔╝██║███████╗██████╔╝    ███████║   ██║   ██║  ██║  ║
          ║  ╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝     ╚══════╝   ╚═╝   ╚═╝  ╚═╝  ║
          ╚══════════════════════════════════════════════════════════════════════╝
          
          EOF

      - name: "Maximize Build Space"
        run: |
          echo "Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          df -h

      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:buildx-stable-1

      - name: "Cache Docker Layers"
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ needs.validate.outputs.build_hash }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "Create Optimized Dockerfile"
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          # Multi-stage build for optimization
          FROM kalilinux/kali-rolling AS base
          
          # Install dependencies in a single layer with cleanup
          RUN apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                  git curl wget ca-certificates gnupg2 \
                  debootstrap syslinux-utils isolinux xorriso \
                  squashfs-tools mtools rsync sshpass live-build \
                  nano sed gzip xz-utils bzip2 \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          
          WORKDIR /build
          
          # Copy build scripts
          COPY scripts/ ./scripts/
          
          # Set proper permissions
          RUN find ./scripts -name "*.sh" -o -name "*.bash" | xargs chmod +x
          
          ENV DEBIAN_FRONTEND=noninteractive
          ENV LANG=C.UTF-8
          ENV LC_ALL=C.UTF-8
          DOCKERFILE_EOF

      - name: "Build Docker Image"
        run: |
          echo "Building optimized Docker image..."
          docker buildx build \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --load \
            -t cybr-builder:${{ needs.validate.outputs.build_hash }} \
            .

      - name: "Create Build Scripts Directory"
        run: mkdir -p scripts

      - name: "Generate Build Configuration"
        run: |
          cat > scripts/build-config.sh << 'CONFIG_EOF'
          #!/bin/bash
          set -euo pipefail
          
          # Build configuration
          export BUILD_VARIANT="${{ github.event.inputs.build_variant || 'standard' }}"
          export ISO_NAME="${{ env.ISO_NAME }}"
          export BUILD_VERSION="${{ env.BUILD_VERSION }}"
          export BUILD_DATE="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          export BUILDER="GitHub Actions"
          
          echo "Build Configuration:"
          echo "  Variant: $BUILD_VARIANT"
          echo "  Version: $BUILD_VERSION"
          echo "  ISO Name: $ISO_NAME"
          echo "  Build Date: $BUILD_DATE"
          CONFIG_EOF
          chmod +x scripts/build-config.sh

      - name: "Generate Package Lists"
        run: |
          # Create package lists based on variant
          mkdir -p config/package-lists
          
          # Base packages for all variants
          cat > config/package-lists/base.list.chroot << 'PKG_EOF'
          # System essentials
          sudo nano curl wget git
          openssh-client openssh-server
          iptables ufw fail2ban
          clamav clamav-freshclam
          htop tree file
          
          # Network tools
          nmap netcat-traditional
          dnsutils whois
          tcpdump wireshark-common
          PKG_EOF
          
          # Additional packages for standard/full builds
          if [[ "${{ github.event.inputs.build_variant || 'standard' }}" != "minimal" ]]; then
            cat > config/package-lists/security.list.chroot << 'SEC_PKG_EOF'
          # Security tools
          hydra john hashcat
          sqlmap gobuster dirb
          steghide binwalk
          exiftool radare2
          rkhunter lynis
          suricata psad
          tripwire
          SEC_PKG_EOF
          fi
          
          # Desktop environment for full build
          if [[ "${{ github.event.inputs.build_variant || 'standard' }}" == "full" ]]; then
            cat > config/package-lists/desktop.list.chroot << 'DESK_PKG_EOF'
          # Desktop environment
          plasma-desktop
          sddm
          firefox-esr
          code-oss
          DESK_PKG_EOF
          fi

      - name: "Execute ISO Build"
        id: build-iso
        run: |
          echo "Starting ISO build process..."
          
          docker run --rm \
            --privileged \
            --tmpfs /tmp:exec \
            -v $PWD:/build \
            -e BUILD_VARIANT="${{ github.event.inputs.build_variant || 'standard' }}" \
            -e BUILD_VERSION="${{ env.BUILD_VERSION }}" \
            -e ISO_NAME="${{ env.ISO_NAME }}" \
            cybr-builder:${{ needs.validate.outputs.build_hash }} \
            bash -c "
              set -euo pipefail
              
              echo '════════════════════════════════════════'
              echo '           STARTING BUILD PROCESS       '
              echo '════════════════════════════════════════'
              
              # Source build configuration
              source ./scripts/build-config.sh
              
              # Clone live-build-config with retry logic
              for i in {1..3}; do
                if git clone --depth=1 https://gitlab.com/kalilinux/build-scripts/live-build-config.git; then
                  break
                elif [[ \$i -eq 3 ]]; then
                  echo 'Failed to clone after 3 attempts'
                  exit 1
                else
                  echo 'Clone failed, retrying in 10 seconds...'
                  sleep 10
                fi
              done
              
              cd live-build-config
              
              # Configure live-build
              cat >> auto/config << CONFIG_EOF
          LB_ISO_IMAGE_NAME=\"\$ISO_NAME\"
          LB_ISO_VOLUME=\"Cybr-NextGen\"
          LB_BUILD_WITH_CHROOT=\"true\"
          LB_COMPRESSION=\"xz\"
          LB_COMPRESSION_OPTIONS=\"-Xbcj x86\"
          LB_BOOTAPPEND_LIVE=\"boot=live components hostname=cybr username=root quiet\"
          LB_ISO_PUBLISHER=\"WolfTech Innovations\"
          LB_ISO_APPLICATION=\"Cybr NextGen Security OS\"
          CONFIG_EOF
              
              # Copy package lists
              cp -r /build/config/package-lists config/ 2>/dev/null || true
              
              # Create hooks directory
              mkdir -p config/hooks/normal
              
              # Download archwrapper with validation
              echo 'Downloading archwrapper...'
              if ! wget -q --timeout=30 https://raw.githubusercontent.com/WolfTech-Innovations/cybr/master/scripts/archwrapper.bash -O config/hooks/normal/0020-archwrapper.hook.chroot; then
                echo 'Warning: Failed to download archwrapper, creating placeholder'
                echo '#!/bin/bash' > config/hooks/normal/0020-archwrapper.hook.chroot
                echo 'echo \"Archwrapper placeholder\"' >> config/hooks/normal/0020-archwrapper.hook.chroot
              fi
              chmod 755 config/hooks/normal/0020-archwrapper.hook.chroot
              
              # Create branding hook
              cat > config/hooks/normal/0030-cybr-branding.hook.chroot << 'BRAND_EOF'
          #!/bin/bash
          set -e
          
          echo 'Applying Cybr branding...'
          
          # Update OS identification
          sed -i 's/Kali GNU\/Linux/Cybr NextGen/g' /etc/os-release || true
          sed -i 's/kali-rolling/cybr-rolling/g' /etc/os-release || true
          sed -i 's/Kali/Cybr/g' /etc/issue /etc/issue.net || true
          
          # Create version info
          cat > /etc/cybr-version << VERSION_EOF
          Cybr NextGen Security OS
          Version: \$BUILD_VERSION
          Build Date: \$BUILD_DATE
          Builder: \$BUILDER
          Variant: \$BUILD_VARIANT
          VERSION_EOF
          
          # Remove plymouth boot splash if present
          if dpkg -l | grep -q plymouth; then
            apt-get purge -y plymouth* || true
            update-initramfs -u || true
          fi
          
          # Configure grub
          sed -i '/GRUB_CMDLINE_LINUX_DEFAULT/c\\GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"' /etc/default/grub || true
          
          # Cleanup
          apt-get autoremove -y || true
          apt-get autoclean || true
          
          echo 'Cybr branding completed successfully'
          BRAND_EOF
              chmod 755 config/hooks/normal/0030-cybr-branding.hook.chroot
              
              # Start the build
              echo '════════════════════════════════════════'
              echo '        EXECUTING LIVE-BUILD           '
              echo '════════════════════════════════════════'
              
              timeout 7200 bash ./build.sh --variant \$BUILD_VARIANT --verbose || {
                echo 'Build failed or timed out after 2 hours'
                exit 1
              }
              
              # Find and move the built ISO
              ISO_PATH=\$(find images/ -name '*.iso' -type f | head -1)
              if [[ -n \"\$ISO_PATH\" && -f \"\$ISO_PATH\" ]]; then
                echo \"Moving ISO from \$ISO_PATH to /build/\$ISO_NAME.iso\"
                mv \"\$ISO_PATH\" \"/build/\$ISO_NAME.iso\"
                
                echo '════════════════════════════════════════'
                echo '          BUILD COMPLETED               '
                echo '════════════════════════════════════════'
                
                ls -lh \"/build/\$ISO_NAME.iso\"
              else
                echo 'ERROR: ISO file not found after build'
                ls -la images/ || true
                exit 1
              fi
            "

      - name: "Validate ISO Build"
        id: iso-info
        run: |
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          
          if [[ ! -f "$ISO_FILE" ]]; then
            echo "ERROR: ISO file not found: $ISO_FILE"
            exit 1
          fi
          
          # Get ISO information
          SIZE=$(stat -c%s "$ISO_FILE")
          SIZE_MB=$(( SIZE / 1024 / 1024 ))
          SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)
          
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          
          echo "┌─────────────────────────────────────────┐"
          echo "│            ISO BUILD SUMMARY            │"
          echo "├─────────────────────────────────────────┤"
          echo "│ File:      $ISO_FILE"
          echo "│ Size:      ${SIZE_MB} MB (${SIZE} bytes)"
          echo "│ SHA256:    $SHA256"
          echo "│ Status:    ✅ Build Successful"
          echo "└─────────────────────────────────────────┘"

      - name: "Set Build Status"
        id: build-status
        run: |
          if [[ "${{ github.event.inputs.force_fail }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            echo "⚠️ Build artificially failed due to force_fail=true"
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Build completed successfully"
          fi

      - name: "Upload ISO Artifact"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "${{ env.ISO_NAME }}"
          path: "${{ env.ISO_NAME }}.iso"
          retention-days: 7
          compression-level: 0  # ISO is already compressed

      - name: "Create Build Report"
        if: always()
        run: |
          cat > build-report.md << 'REPORT_EOF'
          # 🚀 Cybr NextGen Build Report
          
          ## Build Information
          
          | Parameter | Value |
          |-----------|-------|
          | **Build Number** | `${{ github.run_number }}` |
          | **Build Hash** | `${{ needs.validate.outputs.build_hash }}` |
          | **Variant** | `${{ github.event.inputs.build_variant || 'standard' }}` |
          | **Trigger** | `${{ github.event_name }}` |
          | **Status** | ${{ (steps.build-status.outputs.success == 'true' && '✅ Success') || '❌ Failed' }} |
          
          ## ISO Details
          
          | Property | Value |
          |----------|-------|
          | **Filename** | `${{ env.ISO_NAME }}.iso` |
          | **Size** | `${{ steps.iso-info.outputs.size || 'N/A' }} bytes` |
          | **SHA256** | `${{ steps.iso-info.outputs.sha256 || 'N/A' }}` |
          
          ## Build Configuration
          
          ```bash
          BUILD_VARIANT=${{ github.event.inputs.build_variant || 'standard' }}
          FORCE_FAIL=${{ github.event.inputs.force_fail || 'false' }}
          SKIP_UPLOAD=${{ github.event.inputs.skip_upload || 'false' }}
          BUILD_VERSION=${{ env.BUILD_VERSION }}
          ```
          
          ---
          *Generated by Cybr NextGen Build System*
          REPORT_EOF

      - name: "Upload Build Report"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "build-report-${{ github.run_number }}"
          path: "build-report.md"

  # ============================================================================
  #                              UPLOAD JOB
  # ============================================================================
  upload:
    name: "📤 Upload to SourceForge"
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: |
      needs.build.outputs.build_success == 'true' && 
      github.event.inputs.skip_upload != 'true' &&
      (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
    timeout-minutes: 30
    
    steps:
      - name: "Upload Progress Banner"
        run: |
          cat << 'EOF'
          
          ╔══════════════════════════════════════════════════════════════════════╗
          ║  ██╗   ██╗██████╗ ██╗      ██████╗  █████╗ ██████╗     ██╗███╗   ██╗ ║
          ║  ██║   ██║██╔══██╗██║     ██╔═══██╗██╔══██╗██╔══██╗   ██╔╝████╗  ██║ ║
          ║  ██║   ██║██████╔╝██║     ██║   ██║███████║██║  ██║  ██╔╝ ██╔██╗ ██║ ║
          ║  ██║   ██║██╔═══╝ ██║     ██║   ██║██╔══██║██║  ██║ ██╔╝  ██║╚██╗██║ ║
          ║  ╚██████╔╝██║     ███████╗╚██████╔╝██║  ██║██████╔╝██╔╝   ██║ ╚████║ ║
          ║   ╚═════╝ ╚═╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝    ╚═╝  ╚═══╝ ║
          ╚══════════════════════════════════════════════════════════════════════╝
          
          EOF

      - name: "Download ISO Artifact"
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.ISO_NAME }}"

      - name: "Verify ISO Download"
        run: |
          if [[ ! -f "${{ env.ISO_NAME }}.iso" ]]; then
            echo "❌ ISO file not found after download"
            exit 1
          fi
          
          echo "✅ ISO file verified: $(ls -lh ${{ env.ISO_NAME }}.iso)"

      - name: "Install Upload Dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: "Upload to SourceForge"
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
        run: |
          if [[ -z "$SF_USER" || -z "$SF_PASS" ]]; then
            echo "❌ SourceForge credentials not configured"
            exit 1
          fi
          
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          REMOTE_PATH="/home/frs/project/wolfos/$ISO_FILE"
          
          echo "Uploading $ISO_FILE to SourceForge..."
          
          # Upload with retry logic
          for i in {1..3}; do
            if timeout 1800 sshpass -p "$SF_PASS" \
              rsync -avP --progress \
              -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              "./$ISO_FILE" \
              "$SF_USER@frs.sourceforge.net:$REMOTE_PATH"; then
              echo "✅ Upload completed successfully"
              break
            elif [[ $i -eq 3 ]]; then
              echo "❌ Upload failed after 3 attempts"
              exit 1
            else
              echo "⚠️ Upload attempt $i failed, retrying..."
              sleep 30
            fi
          done
          
          echo "🎉 ISO successfully uploaded to SourceForge!"
          echo "Download URL: https://sourceforge.net/projects/wolfos/files/$ISO_FILE/download"

  # ============================================================================
  #                            NOTIFICATION JOB
  # ============================================================================
  notify:
    name: "🔔 Send Notifications"
    runs-on: ubuntu-latest
    needs: [validate, build, upload]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: "Notification Banner"
        run: |
          cat << 'EOF'
          
          ╔══════════════════════════════════════════════════════════════════════╗
          ║  ███╗   ██╗ ██████╗ ████████╗██╗███████╗██╗   ██╗██╗███╗   ██╗ ██████╗║
          ║  ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝╚██╗ ██╔╝██║████╗  ██║██╔════╝║
          ║  ██╔██╗ ██║██║   ██║   ██║   ██║█████╗   ╚████╔╝ ██║██╔██╗ ██║██║  ███╗║
          ║  ██║╚██╗██║██║   ██║   ██║   ██║██╔══╝    ╚██╔╝  ██║██║╚██╗██║██║   ██║║
          ║  ██║ ╚████║╚██████╔╝   ██║   ██║██║        ██║   ██║██║ ╚████║╚██████╔╝║
          ║  ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝╚═╝        ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝ ║
          ╚══════════════════════════════════════════════════════════════════════╝
          
          EOF

      - name: "Determine Overall Status"
        id: status
        run: |
          # Determine the overall pipeline status
          BUILD_STATUS="${{ needs.build.outputs.build_success }}"
          UPLOAD_STATUS="${{ needs.upload.result }}"
          
          if [[ "$BUILD_STATUS" == "true" ]]; then
            if [[ "$UPLOAD_STATUS" == "success" || "$UPLOAD_STATUS" == "skipped" ]]; then
              echo "overall_status=success" >> $GITHUB_OUTPUT
              echo "status_emoji=🎉" >> $GITHUB_OUTPUT
              echo "status_message=Build and upload completed successfully!" >> $GITHUB_OUTPUT
            else
              echo "overall_status=partial" >> $GITHUB_OUTPUT
              echo "status_emoji=⚠️" >> $GITHUB_OUTPUT
              echo "status_message=Build succeeded but upload failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "overall_status=failure" >> $GITHUB_OUTPUT
            echo "status_emoji=❌" >> $GITHUB_OUTPUT