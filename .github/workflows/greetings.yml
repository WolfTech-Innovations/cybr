name: Build Cybr ISO (New)

on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force fail API"
        required: false
        default: "No"
        type: choice
        options: ["No", "Yes"]

jobs:
  build-os:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.set-status.outputs.success }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Run Cybr Build Container
        run: |
          # Create Dockerfile for build environment
          cat > Dockerfile << 'EOF'
          FROM kalilinux:kali-rolling
          
          # Install all required dependencies
          RUN apt-get update && apt-get install -y \
              git curl wget \
              debootstrap \
              syslinux-utils \
              isolinux \
              xorriso \
              squashfs-tools \
              mtools \
              rsync \
              sshpass \
              live-build \
              sudo \
              python3 \
              python3-pip \
              python3-venv \
              gawk \
              coreutils \
              && rm -rf /var/lib/apt/lists/*
          
          WORKDIR /build
          VOLUME ["/build/output"]
          
          # Enable privileged operations in container
          RUN echo "ALL ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          
          COPY build-scripts/ /build/scripts/
          RUN chmod +x /build/scripts/*.sh
          
          CMD ["/build/scripts/build-cybr.sh"]
          EOF

      - name: Create Build Scripts Directory
        run: mkdir -p build-scripts

      - name: Create Main Build Script
        run: |
          cat > build-scripts/build-cybr.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting Cybr OS build..."
          
          # Clone Kali Live-Build Config
          git clone https://gitlab.com/kalilinux/build-scripts/live-build-config.git
          cd live-build-config
          
          # Configure build settings
          echo 'LB_ISO_IMAGE_NAME="cybr"' | tee -a auto/config
          echo 'LB_ISO_VOLUME="Cybr"' | tee -a auto/config
          echo 'LB_BUILD_WITH_CHROOT="true"' | tee -a auto/config
          echo 'LB_COMPRESSION="xz"' | tee -a auto/config
          echo 'LB_BOOTAPPEND_LIVE="boot=live components hostname=cybr username=root quiet splash"' | tee -a auto/config
          echo 'LB_BOOTLOADER_TIMEOUT="3"' | tee -a auto/config
          
          # Create custom package lists
          mkdir -p config/package-lists
          
          # Base packages (no Kali tools included for pick-and-choose approach)
          cat > config/package-lists/cybr-base.list.chroot << 'PACKAGES'
          plasma-desktop
          sddm
          nano
          curl
          wget
          git
          firefox-esr
          neofetch
          python3
          python3-pip
          python3-tk
          python3-venv
          PACKAGES
          
          # Create branding hook script
          mkdir -p config/hooks/normal
          cat > config/hooks/normal/0010-cybr-branding.hook.chroot << 'BRANDING'
          #!/bin/bash
          set -e
          
          echo "Applying Cybr branding..."
          
          # Update OS release files
          cat > /etc/os-release << 'OSREL'
          NAME="Cybr"
          VERSION="1.0"
          ID=cybr
          ID_LIKE=debian
          VERSION_ID="1.0"
          PRETTY_NAME="Cybr 1.0"
          VERSION_CODENAME=cybr
          HOME_URL="https://github.com/WolfTech-Innovations/"
          SUPPORT_URL="https://github.com/WolfTech-Innovations/"
          BUG_REPORT_URL="https://github.com/WolfTech-Innovations/"
          OSREL
          
          # Update LSB release
          cat > /etc/lsb-release << 'LSBREL'
          DISTRIB_ID=Cybr
          DISTRIB_RELEASE=1.0
          DISTRIB_CODENAME=cybr
          DISTRIB_DESCRIPTION="Cybr 1.0"
          LSBREL
          
          # Create credits file
          cat > /etc/cybr-credits << 'CREDITS'
          Cybr OS - A Kali Linux Based Security Distribution
          
          Built with love by WolfTech Innovations
          Based on Kali Linux - Special thanks to the Kali Linux team
          
          Kali Linux Credits:
          - Offensive Security for creating and maintaining Kali Linux
          - The Debian Project for the solid foundation
          - All the security tool developers whose work makes this possible
          
          Visit: https://github.com/WolfTech-Innovations/
          Original Kali: https://www.kali.org/
          CREDITS
          
          # Remove Plymouth (boot animation)
          apt-get remove --purge -y plymouth plymouth-themes || true
          
          # Configure Firefox homepage
          mkdir -p /etc/firefox/policies
          cat > /etc/firefox/policies/policies.json << 'FFPOLICY'
          {
            "policies": {
              "Homepage": {
                "URL": "https://github.com/WolfTech-Innovations/"
              },
              "NewTabPage": false
            }
          }
          FFPOLICY
          
          # Create Python package store script for first boot
          mkdir -p /usr/local/bin
          cat > /usr/local/bin/cybr-package-store << 'PKGSTORE'
          #!/usr/bin/env python3
          """
          Cybr Package Store - Kali Meta Package Installer
          """
          
          import tkinter as tk
          from tkinter import ttk, messagebox
          import subprocess
          import threading
          import os
          import sys
          
          class CybrPackageStore:
              def __init__(self):
                  self.root = tk.Tk()
                  self.root.title("Cybr Package Store")
                  self.root.geometry("800x600")
                  
                  self.packages = {
                      "Web Application Security": "kali-tools-web",
                      "Wireless Security": "kali-tools-wireless",
                      "Information Gathering": "kali-tools-information-gathering",
                      "Vulnerability Assessment": "kali-tools-vulnerability",
                      "Forensics": "kali-tools-forensics",
                      "Password Attacks": "kali-tools-passwords",
                      "Exploitation Tools": "kali-tools-exploitation",
                      "Reverse Engineering": "kali-tools-reverse-engineering",
                      "Hardware Hacking": "kali-tools-hardware",
                      "Reporting Tools": "kali-tools-reporting",
                      "Social Engineering": "kali-tools-social-engineering",
                      "Sniffing & Spoofing": "kali-tools-sniffing-spoofing"
                  }
                  
                  self.create_widgets()
                  
              def create_widgets(self):
                  # Header
                  header = tk.Label(self.root, text="Cybr Package Store", 
                                   font=("Arial", 16, "bold"))
                  header.pack(pady=10)
                  
                  subtitle = tk.Label(self.root, 
                                     text="Select Kali meta-packages to install")
                  subtitle.pack()
                  
                  # Package list with checkboxes
                  self.frame = ttk.Frame(self.root)
                  self.frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
                  
                  self.vars = {}
                  for name, package in self.packages.items():
                      var = tk.BooleanVar()
                      self.vars[package] = var
                      cb = ttk.Checkbutton(self.frame, text=name, variable=var)
                      cb.pack(anchor='w', pady=2)
                  
                  # Buttons
                  button_frame = ttk.Frame(self.root)
                  button_frame.pack(pady=10)
                  
                  install_btn = ttk.Button(button_frame, text="Install Selected", 
                                         command=self.install_packages)
                  install_btn.pack(side=tk.LEFT, padx=5)
                  
                  quit_btn = ttk.Button(button_frame, text="Close", 
                                       command=self.root.quit)
                  quit_btn.pack(side=tk.LEFT, padx=5)
                  
              def install_packages(self):
                  selected = [pkg for pkg, var in self.vars.items() if var.get()]
                  if not selected:
                      messagebox.showwarning("Warning", "No packages selected!")
                      return
                      
                  # Install in separate thread to avoid GUI freeze
                  thread = threading.Thread(target=self.do_install, args=(selected,))
                  thread.daemon = True
                  thread.start()
                  
              def do_install(self, packages):
                  try:
                      cmd = ["pkexec", "apt", "update"]
                      subprocess.run(cmd, check=True)
                      
                      cmd = ["pkexec", "apt", "install", "-y"] + packages
                      subprocess.run(cmd, check=True)
                      
                      messagebox.showinfo("Success", "Packages installed successfully!")
                  except subprocess.CalledProcessError as e:
                      messagebox.showerror("Error", f"Installation failed: {e}")
                      
              def run(self):
                  self.root.mainloop()
          
          if __name__ == "__main__":
              app = CybrPackageStore()
              app.run()
          PKGSTORE
          
          chmod +x /usr/local/bin/cybr-package-store
          
          # Create desktop entry for package store
          mkdir -p /usr/share/applications
          cat > /usr/share/applications/cybr-package-store.desktop << 'DESKTOP'
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Cybr Package Store
          Comment=Install Kali security tools
          Exec=/usr/local/bin/cybr-package-store
          Icon=package-manager
          Terminal=false
          Categories=System;Settings;
          DESKTOP
          
          # Create first boot service (non-live only)
          cat > /etc/systemd/system/cybr-firstboot.service << 'SERVICE'
          [Unit]
          Description=Cybr First Boot Setup
          After=graphical-session.target
          Wants=graphical-session.target
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/cybr-firstboot-setup
          RemainAfterExit=yes
          User=root
          
          [Install]
          WantedBy=multi-user.target
          SERVICE
          
          cat > /usr/local/bin/cybr-firstboot-setup << 'FIRSTBOOT'
          #!/bin/bash
          
          # Check if running live
          if grep -q "boot=live" /proc/cmdline; then
              exit 0
          fi
          
          # Check if already run
          if [ -f /var/lib/cybr-firstboot-done ]; then
              exit 0
          fi
          
          # Show package store on first boot
          if [ -n "$DISPLAY" ] && [ -n "$USER" ]; then
              su - $USER -c "DISPLAY=$DISPLAY /usr/local/bin/cybr-package-store" || true
          fi
          
          # Mark as done
          touch /var/lib/cybr-firstboot-done
          FIRSTBOOT
          
          chmod +x /usr/local/bin/cybr-firstboot-setup
          systemctl enable cybr-firstboot.service
          
          echo "Cybr branding applied successfully!"
          BRANDING
          
          chmod +x config/hooks/normal/0010-cybr-branding.hook.chroot
          
          # Create GRUB customization hook
          cat > config/hooks/normal/0020-grub-customization.hook.chroot << 'GRUB'
          #!/bin/bash
          set -e
          
          echo "Customizing GRUB..."
          
          # Create custom GRUB config
          mkdir -p /etc/default/grub.d
          cat > /etc/default/grub.d/cybr.cfg << 'GRUBCFG'
          GRUB_DISTRIBUTOR="Cybr"
          GRUB_DEFAULT=0
          GRUB_TIMEOUT=5
          GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
          GRUB_INIT_TUNE="480 440 1"
          GRUBCFG
          
          # Custom GRUB theme colors
          cat > /boot/grub/custom.cfg << 'GRUBTHEME'
          set color_normal=light-cyan/black
          set color_highlight=black/light-cyan
          set menu_color_normal=light-cyan/black
          set menu_color_highlight=black/light-cyan
          GRUBTHEME
          
          echo "GRUB customization completed!"
          GRUB
          
          chmod +x config/hooks/normal/0020-grub-customization.hook.chroot
          
          # Build the ISO
          echo "Building Cybr ISO..."
          sudo lb build 2>&1 | tee build.log
          
          # Copy output
          if [ -f "*.iso" ]; then
              cp *.iso /build/output/cybr.iso
              echo "Build completed successfully!"
              ls -lh /build/output/
          else
              echo "Build failed - no ISO found"
              exit 1
          fi
          EOF
          
          chmod +x build-scripts/build-cybr.sh

      - name: Build Docker Image and Run Build
        run: |
          # Build the Docker image
          docker build -t cybr-builder .
          
          # Create output directory
          mkdir -p ./output
          
          # Run the build in Docker with necessary privileges
          docker run --privileged --rm \
            -v $(pwd)/output:/build/output \
            -v /dev:/dev \
            cybr-builder

      - name: Verify Build Output
        run: |
          if [ -f "./output/cybr.iso" ]; then
            echo "Build successful!"
            ls -lh ./output/cybr.iso
            file ./output/cybr.iso
          else
            echo "Build failed - no ISO found"
            exit 1
          fi

      - name: Upload to SourceForge
        if: success()
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
          OSVER: 2
        run: |
          sshpass -p "$SF_PASS" scp -o StrictHostKeyChecking=no \
            ./output/cybr.iso \
            "$SF_USER@frs.sourceforge.net:/home/frs/project/wolfos/Cybr-v${OSVER}.iso"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cybr-iso
          path: ./output/cybr.iso
          retention-days: 30

      - name: Set Build Status
        id: set-status
        run: |
          if [[ "${{ github.event.inputs.force_fail }}" == "Yes" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "success=true" >> $GITHUB_OUTPUT

  notify-api:
    needs: build-os
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Build Status
        run: |
          BUILD_STATUS="${{ needs.build-os.outputs.build_success }}"
          curl --max-time 30 -X POST "${{ secrets.API_URL }}" \
            -H "Content-Type: application/json" \
            -d "{\"status\":\"$BUILD_STATUS\",\"workflow\":\"cybr-build\"}" || true