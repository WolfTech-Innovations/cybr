name: Build Cybr ISO (New)

on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force fail API"
        required: false
        default: "No"
        type: choice
        options: ["No", "Yes"]

jobs:
  build-os:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.set-status.outputs.success }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Cybr ISO in Docker
        run: |
          docker run --rm \
            --privileged \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            debian:bookworm \
            bash -c "
              set -e
              
              # Update and install dependencies
              apt-get update
              apt-get install -y \
                git curl wget \
                debootstrap syslinux-utils isolinux xorriso \
                squashfs-tools mtools rsync sshpass \
                live-build cpio gzip \
                dosfstools parted \
                python3 python3-pip \
                grub-pc-bin grub-efi-amd64-bin
              
              # Clone Kali Live-Build Config
              git clone https://gitlab.com/kalilinux/build-scripts/live-build-config.git
              cd live-build-config
              
              # Configure build settings
              cat >> auto/config << 'EOF'
LB_ISO_IMAGE_NAME=\"cybr\"
LB_ISO_VOLUME=\"Cybr\"
LB_BUILD_WITH_CHROOT=\"true\"
LB_COMPRESSION=\"xz\"
LB_BOOTAPPEND_LIVE=\"boot=live components hostname=cybr username=cybr quiet splash\"
LB_BOOTLOADER=\"grub-efi\"
LB_DEBIAN_INSTALLER=\"false\"
LB_MEMTEST=\"none\"
EOF
              
              # Create custom package list
              mkdir -p config/package-lists
              cat > config/package-lists/cybr.list.chroot << 'EOF'
firefox-esr
neofetch
nano
curl
wget
git
python3
python3-pip
python3-tk
network-manager
plasma-desktop
sddm
konsole
dolphin
kate
systemsettings
plasma-nm
EOF
              
              # Create branding hooks directory
              mkdir -p config/hooks/normal
              mkdir -p config/hooks/live
              mkdir -p config/includes.chroot/etc
              mkdir -p config/includes.chroot/usr/local/bin
              mkdir -p config/includes.chroot/home/cybr/.config
              
              # Create OS branding hook
              cat > config/hooks/normal/0010-cybr-branding.hook.chroot << 'EOF'
#!/bin/bash
set -e

# Update OS release files
cat > /etc/os-release << 'OSEOF'
NAME=\"Cybr\"
VERSION=\"2.0\"
ID=cybr
ID_LIKE=debian
PRETTY_NAME=\"Cybr 2.0\"
VERSION_ID=\"2.0\"
HOME_URL=\"https://github.com/WolfTech-Innovations/\"
SUPPORT_URL=\"https://github.com/WolfTech-Innovations/cybr\"
BUG_REPORT_URL=\"https://github.com/WolfTech-Innovations/cybr/issues\"
OSEOF

# Update issue files
echo \"Cybr 2.0 \\\\n \\\\l\" > /etc/issue
echo \"Cybr 2.0\" > /etc/issue.net

# Update hostname
echo \"cybr\" > /etc/hostname

# Create Cybr credits
cat > /etc/cybr-credits << 'CREDITS'
Cybr OS - Based on Kali Linux
=============================

Special thanks to:
- The Kali Linux Team for their excellent security distribution
- Offensive Security for maintaining Kali Linux
- The Debian Project for the solid foundation
- WolfTech Innovations for Cybr branding and customization

Visit: https://github.com/WolfTech-Innovations/
CREDITS

# Remove Plymouth (boot animation)
systemctl disable plymouth-start.service 2>/dev/null || true
systemctl disable plymouth-read-write.service 2>/dev/null || true
systemctl disable plymouth-quit-wait.service 2>/dev/null || true
systemctl disable plymouth-quit.service 2>/dev/null || true

# Set Firefox homepage
mkdir -p /etc/firefox/policies
cat > /etc/firefox/policies/policies.json << 'FFEOF'
{
  \"policies\": {
    \"Homepage\": {
      \"URL\": \"https://github.com/WolfTech-Innovations/\",
      \"Locked\": false
    }
  }
}
FFEOF

# Create neofetch config for cybr branding
mkdir -p /etc/skel/.config/neofetch
cat > /etc/skel/.config/neofetch/config.conf << 'NEOEOF'
print_info() {
    info title
    info underline

    info \"OS\" distro
    info \"Host\" model
    info \"Kernel\" kernel
    info \"Uptime\" uptime
    info \"Packages\" packages
    info \"Shell\" shell
    info \"Resolution\" resolution
    info \"DE\" de
    info \"WM\" wm
    info \"WM Theme\" wm_theme
    info \"Theme\" theme
    info \"Icons\" icons
    info \"Terminal\" term
    info \"Terminal Font\" term_font
    info \"CPU\" cpu
    info \"GPU\" gpu
    info \"Memory\" memory

    info \"GPU Driver\" gpu_driver
    info \"CPU Usage\" cpu_usage
    info \"Disk\" disk
    info \"Battery\" battery
    info \"Font\" font
    info \"Song\" song
    info \"Local IP\" local_ip
    info \"Public IP\" public_ip
    info \"Users\" users
    info \"Locale\" locale

    info cols
}

ascii_distro=\"arch_small\"
NEOEOF

# Create default user
useradd -m -s /bin/bash cybr
echo \"cybr:cybr\" | chpasswd
usermod -aG sudo cybr

# Copy neofetch config to cybr user
cp -r /etc/skel/.config /home/cybr/
chown -R cybr:cybr /home/cybr/.config
EOF
              
              # Create package store hook (for non-live instances)
              cat > config/hooks/normal/0020-package-store.hook.chroot << 'EOF'
#!/bin/bash
set -e

# Create Python-based package store
cat > /usr/local/bin/cybr-store << 'STOREEOF'
#!/usr/bin/env python3
\"\"\"
Cybr Package Store - Kali Metapackage Manager
\"\"\"

import subprocess
import sys
import os

KALI_METAPACKAGES = {
    \"Information Gathering\": [
        \"kali-tools-information-gathering\",
        \"nmap\", \"whois\", \"dnsutils\", \"theharvester\", \"dnsenum\"
    ],
    \"Vulnerability Analysis\": [
        \"kali-tools-vulnerability\",
        \"nessus\", \"openvas\", \"nikto\", \"sqlmap\"
    ],
    \"Web Applications\": [
        \"kali-tools-web\",
        \"burpsuite\", \"owasp-zap\", \"gobuster\", \"dirb\"
    ],
    \"Database Assessment\": [
        \"kali-tools-database\",
        \"sqlmap\", \"sqsh\"
    ],
    \"Password Attacks\": [
        \"kali-tools-passwords\",
        \"john\", \"hashcat\", \"hydra\", \"medusa\"
    ],
    \"Wireless Attacks\": [
        \"kali-tools-wireless\",
        \"aircrack-ng\", \"reaver\", \"kismet\"
    ],
    \"Reverse Engineering\": [
        \"kali-tools-reverse-engineering\",
        \"radare2\", \"ghidra\", \"binwalk\"
    ],
    \"Exploitation Tools\": [
        \"kali-tools-exploitation\",
        \"metasploit-framework\", \"armitage\"
    ],
    \"Forensics\": [
        \"kali-tools-forensics\",
        \"autopsy\", \"sleuthkit\", \"volatility\"
    ],
    \"Reporting Tools\": [
        \"kali-tools-reporting\",
        \"cherrytree\", \"cutycapt\"
    ]
}

def run_command(cmd):
    \"\"\"Execute shell command\"\"\"
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, \"\", str(e)

def install_packages(packages):
    \"\"\"Install selected packages\"\"\"
    package_list = \" \".join(packages)
    print(f\"Installing: {package_list}\")
    success, stdout, stderr = run_command(f\"apt-get update && apt-get install -y {package_list}\")
    if success:
        print(\"✓ Installation completed successfully!\")
    else:
        print(f\"✗ Installation failed: {stderr}\")
    return success

def main():
    if os.geteuid() != 0:
        print(\"Error: This script must be run as root (use sudo)\")
        sys.exit(1)
    
    print(\"\\n=== Cybr Package Store - Kali Tools Installer ===\")
    print(\"Pick and choose your security tools\\n\")
    
    categories = list(KALI_METAPACKAGES.keys())
    
    while True:
        print(\"Available categories:\")
        for i, category in enumerate(categories, 1):
            print(f\"{i:2d}. {category}\")
        print(\" 0. Exit\")
        
        try:
            choice = int(input(\"\\nSelect category (0 to exit): \"))
            if choice == 0:
                break
            elif 1 <= choice <= len(categories):
                category = categories[choice - 1]
                packages = KALI_METAPACKAGES[category]
                
                print(f\"\\nPackages in {category}:\")
                for pkg in packages:
                    print(f\"  - {pkg}\")
                
                confirm = input(f\"\\nInstall all packages from {category}? (y/n): \")
                if confirm.lower() == 'y':
                    install_packages(packages)
                
                input(\"Press Enter to continue...\")
            else:
                print(\"Invalid selection!\")
        except ValueError:
            print(\"Please enter a valid number!\")
        except KeyboardInterrupt:
            print(\"\\nExiting...\")
            break

if __name__ == \"__main__\":
    main()
STOREEOF

chmod +x /usr/local/bin/cybr-store

# Create desktop entry for package store
cat > /usr/share/applications/cybr-store.desktop << 'DESKTOPEOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Cybr Package Store
Comment=Install Kali security tools
Exec=konsole -e sudo cybr-store
Icon=system-software-install
Terminal=false
Categories=System;Security;
DESKTOPEOF
EOF
              
              # Create GRUB customization
              mkdir -p config/includes.chroot/etc/default
              cat > config/includes.chroot/etc/default/grub << 'GRUBEOF'
GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=\"Cybr\"
GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"
GRUB_CMDLINE_LINUX=\"\"
GRUB_TERMINAL_OUTPUT=\"console\"
GRUB_INIT_TUNE=\"480 440 1\"
GRUBEOF
              
              # Create first boot script for package store
              cat > config/includes.chroot/etc/init.d/cybr-firstboot << 'BOOTEOF'
#!/bin/bash
### BEGIN INIT INFO
# Provides:          cybr-firstboot
# Required-Start:    \$local_fs \$network
# Required-Stop:     \$local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Cybr first boot setup
### END INIT INFO

FIRSTBOOT_FLAG=\"/var/lib/cybr-firstboot-done\"

if [ ! -f \"\$FIRSTBOOT_FLAG\" ]; then
    # Check if this is not a live environment
    if ! grep -q \"boot=live\" /proc/cmdline; then
        # Show welcome message and package store option
        cat > /tmp/cybr-welcome.sh << 'WELCOMEEOF'
#!/bin/bash
zenity --info --title=\"Welcome to Cybr\" --text=\"Welcome to Cybr OS!\\n\\nThis is a customized security-focused distribution based on Kali Linux.\\n\\nYou can install additional security tools using the Cybr Package Store.\\n\\nFind it in your applications menu or run 'sudo cybr-store' in terminal.\" --width=400
WELCOMEEOF
        chmod +x /tmp/cybr-welcome.sh
        su - cybr -c \"/tmp/cybr-welcome.sh\" &
    fi
    touch \"\$FIRSTBOOT_FLAG\"
fi
BOOTEOF
              
              chmod +x config/includes.chroot/etc/init.d/cybr-firstboot
              
              # Enable first boot script
              cat > config/hooks/normal/0030-enable-firstboot.hook.chroot << 'EOF'
#!/bin/bash
update-rc.d cybr-firstboot defaults
EOF
              
              # Make all hooks executable
              chmod +x config/hooks/normal/*.hook.chroot
              
              # Build the ISO
              echo \"Starting Cybr ISO build...\"
              lb config --verbose
              lb build --verbose
              
              # Move and rename the final ISO
              if [ -f images/*.iso ]; then
                mv images/*.iso /workspace/cybr.iso
                echo \"✓ Cybr ISO built successfully!\"
                ls -lh /workspace/cybr.iso
              else
                echo \"✗ ISO build failed!\"
                exit 1
              fi
            "

      - name: Verify ISO Creation
        run: |
          if [ -f cybr.iso ]; then
            echo "✓ ISO created successfully"
            ls -lh cybr.iso
            echo "ISO_SIZE=$(du -h cybr.iso | cut -f1)" >> $GITHUB_ENV
          else
            echo "✗ ISO creation failed"
            exit 1
          fi

      - name: Upload to SourceForge
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
          OSVER: 2
        run: |
          echo "Uploading Cybr ISO (${ISO_SIZE}) to SourceForge..."
          sshpass -p "$SF_PASS" scp -o StrictHostKeyChecking=no ./cybr.iso "$SF_USER@frs.sourceforge.net:/home/frs/project/wolfos/Cybr-v${OSVER}.iso"
          echo "✓ Upload completed successfully!"

      - name: Set Build Status
        id: set-status
        run: |
          if [[ "${{ github.event.inputs.force_fail }}" == "Yes" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "success=true" >> $GITHUB_OUTPUT

  notify-api:
    needs: build-os
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify API
        run: |
          STATUS="${{ needs.build-os.outputs.build_success }}"
          curl --max-time 30 -X POST \
            -H "Content-Type: application/json" \
            -d "{\"build_success\":\"$STATUS\",\"workflow\":\"cybr-iso-build\"}" \
            "${{ secrets.API_URL }}" || echo "API notification failed"