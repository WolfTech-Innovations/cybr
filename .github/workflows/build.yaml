name: "Cybr NextGen Build System"

on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force build failure for testing"
        required: false
        default: "false"
        type: boolean
      build_variant:
        description: "Build variant"
        required: false
        default: "standard"
        type: choice
        options: ["minimal", "standard", "full"]
      skip_upload:
        description: "Skip upload to SourceForge"
        required: false
        default: "false"
        type: boolean
  push:
    branches: [main, develop]
    paths: ['scripts/**', 'config/**', '.github/workflows/build.yml']
  schedule:
    - cron: '0 2 * * 0' # Weekly builds on Sunday 2AM UTC

env:
  DOCKER_BUILDKIT: 1
  BUILDX_CACHE_TO: type=gha,mode=max
  BUILDX_CACHE_FROM: type=gha
  BUILD_VERSION: ${{ github.run_number }}
  ISO_NAME: "cybr-nextgen-v${{ github.run_number }}"

jobs:
  # ============================================================================
  #                           PRE-BUILD VALIDATION
  # ============================================================================
  validate:
    name: "Pre-Build Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: "ASCII Art Banner"
        run: |
          cat << 'EOF'
          
          ╔═══════════════════════════════════════════════════════════════════════╗
          ║                                                                       ║
          ║    ▄████▄▓██   ██▓ ▄▄▄▄    ██▀███      ▄▄▄▄    █    ██  ██▓ ██▓   ▄▄▄▄   ║
          ║   ▒██▀ ▀█ ▒██  ██▒▓█████▄ ▓██ ▒ ██▒   ▓█████▄  ██  ▓██▒▓██▒▓██▒  ▓█████▄ ║
          ║   ▒▓█    ▄ ▒██ ██░▒██▒ ▄██▓██ ░▄█ ▒   ▒██▒ ▄██▓██  ▒██░▒██▒▒██░  ▒██▒ ▄██║
          ║   ▒▓▓▄ ▄██▒░ ▐██▓░▒██░█▀  ▒██▀▀█▄     ▒██░█▀  ▓▓█  ░██░░██░▒██░  ▒██░█▀  ║
          ║   ▒ ▓███▀ ░░ ██▒▓░░▓█  ▀█▓░██▓ ▒██▒   ░▓█  ▀█▓▒▒█████▓ ░██░░██████▒█  ▀█▓║
          ║   ░ ░▒ ▒  ░ ██▒▒▒ ░▒▓███▀▒░ ▒▓ ░▒▓░   ░▒▓███▀▒░▒▓▒ ▒ ▒ ░▓  ░ ▒░▓  ░▒▓███▀▒║
          ║     ░  ▒  ▓██ ░▒░ ▒░▒   ░   ░▒ ░ ▒░   ▒░▒   ░ ░░▒░ ░ ░  ▒ ░░ ░ ▒  ░▒   ░ ║
          ║   ░       ▒ ▒ ░░   ░    ░   ░░   ░     ░    ░  ░░░ ░ ░  ▒ ░  ░ ░   ░    ░ ║
          ║   ░ ░     ░ ░      ░         ░         ░         ░      ░      ░  ░      ║
          ║   ░       ░ ░           ░                   ░                        ░    ║
          ║                                                                       ║
          ║                    NEXT-GENERATION SECURITY OS BUILDER               ║
          ║                                                                       ║
          ╚═══════════════════════════════════════════════════════════════════════╝
          
          EOF
          
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Generate Build Hash"
        id: hash
        run: |
          HASH=$(echo "${{ github.sha }}-${{ github.event.inputs.build_variant }}-${{ github.run_number }}" | sha256sum | cut -d' ' -f1 | head -c 16)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Build Hash: $HASH"
          
      - name: "Validation Checks"
        id: check
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          
          echo "┌─────────────────────────────────────────┐"
          echo "│           VALIDATION REPORT             │"
          echo "├─────────────────────────────────────────┤"
          echo "│ Build Variant: ${{ github.event.inputs.build_variant || 'standard' }}"
          echo "│ Force Fail:    ${{ github.event.inputs.force_fail || 'false' }}"
          echo "│ Skip Upload:   ${{ github.event.inputs.skip_upload || 'false' }}"
          echo "│ Build Number:  ${{ github.run_number }}"
          echo "│ Trigger:       ${{ github.event_name }}"
          echo "└─────────────────────────────────────────┘"

  # ============================================================================
  #                              MAIN BUILD JOB
  # ============================================================================
  build:
    name: "Build Cybr OS"
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    timeout-minutes: 340
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      iso_size: ${{ steps.iso-info.outputs.size }}
      iso_sha256: ${{ steps.iso-info.outputs.sha256 }}

    steps:
      - name: "Build Progress Banner"
        run: |
          cat << 'EOF'
          
          ╔══════════════════════════════════════════════════════════════════════╗
          ║  ██████╗ ██╗   ██╗██╗██╗     ██████╗     ███████╗████████╗ █████╗   ║
          ║  ██╔══██╗██║   ██║██║██║     ██╔══██╗    ██╔════╝╚══██╔══╝██╔══██╗  ║
          ║  ██████╔╝██║   ██║██║██║     ██║  ██║    ███████╗   ██║   ███████║  ║
          ║  ██╔══██╗██║   ██║██║██║     ██║  ██║    ╚════██║   ██║   ██╔══██║  ║
          ║  ██████╔╝╚██████╔╝██║███████╗██████╔╝    ███████║   ██║   ██║  ██║  ║
          ║  ╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝     ╚══════╝   ╚═╝   ╚═╝  ╚═╝  ║
          ╚══════════════════════════════════════════════════════════════════════╝
          
          EOF

      - name: "Maximize Build Space"
        run: |
          echo "Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          df -h

      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "Install Cybr Hook"
        run: |
          mkdir -p config/hooks/normal
          curl -fsSL https://raw.githubusercontent.com/WolfTech-Innovations/cybr/main/scripts/archwrapper.bash -o config/hooks/normal/0150-bootloader-branding.hook.chroot
          chmod +x config/hooks/normal/0150-bootloader-branding.hook.chroot

      - name: "Install Neo Hook"
        run: |
          mkdir -p config/hooks/normal
          curl -fsSL https://raw.githubusercontent.com/WolfTech-Innovations/Neo/main/lb-hooks/0201-Neo.chroot -o config/hooks/normal/0390-neo-enhancements.hook.chroot
          chmod +x config/hooks/normal/0390-neo-enhancements.hook.chroot

      - name: "Create Hyprland and end-4 Dotfiles Hook"
        run: |
          mkdir -p config/hooks/normal
          cat > config/hooks/normal/0395-hyprland-end4-setup.hook.chroot << 'HYPRLAND_EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "Setting up Hyprland with end-4 dotfiles for Cybr Linux..."
          
          # Ensure Hyprland and dependencies are installed
          apt-get update
          apt-get install -y hyprland xdg-desktop-portal-hyprland waybar wofi kitty dunst grim slurp wl-clipboard
          
          # Install additional dependencies for end-4 setup
          apt-get install -y brightnessctl playerctl pamixer pavucontrol bluez blueman polkit-gnome
          apt-get install -y gjs gtk-layer-shell libgtk-3-0 libgtk-3-dev npm nodejs
          
          # Install AGS (Aylur's GTK Shell) for end-4 dotfiles
          echo "Installing AGS (Aylur's GTK Shell)..."
          if ! command -v ags >/dev/null 2>&1; then
              cd /tmp
              git clone --depth=1 https://github.com/Aylur/ags.git
              cd ags
              npm install
              meson setup build
              meson install -C build
              cd /
              rm -rf /tmp/ags
          fi
          
          # Create Hyprland session file
          cat > /usr/share/wayland-sessions/hyprland.desktop << 'HYPR_SESSION_EOF'
          [Desktop Entry]
          Name=Hyprland
          Comment=An intelligent dynamic tiling Wayland compositor
          Exec=Hyprland
          Type=Application
          DesktopNames=Hyprland
          HYPR_SESSION_EOF
          
          # Install end-4 dotfiles for cybr user
          echo "Installing end-4 dotfiles..."
          
          # Run end-4 installer as cybr user
          su - cybr -c 'bash <(curl -s https://ii.clsty.link/setup)' || {
              echo "Warning: end-4 installer may require manual intervention"
              echo "Dotfiles can be installed manually after first boot"
          }
          
          # Create Hyprland autostart for SDDM
          mkdir -p /etc/sddm.conf.d
          cat > /etc/sddm.conf.d/hyprland.conf << 'SDDM_HYPR_EOF'
          [General]
          DisplayServer=wayland
          
          [Wayland]
          SessionDir=/usr/share/wayland-sessions
          SDDM_HYPR_EOF
          
          # Set Hyprland as default session
          mkdir -p /var/lib/AccountsService/users
          cat > /var/lib/AccountsService/users/cybr << 'ACCOUNTS_EOF'
          [User]
          Language=
          XSession=hyprland
          SystemAccount=false
          ACCOUNTS_EOF
          
          # Create desktop entry for Hyprland on live system
          mkdir -p /home/cybr/Desktop
          cat > /home/cybr/Desktop/Start_Hyprland.desktop << 'HYPR_START_EOF'
          [Desktop Entry]
          Type=Application
          Version=1.0
          Name=Start Hyprland
          Comment=Launch Hyprland Wayland compositor
          Icon=preferences-system-windows
          Exec=Hyprland
          Terminal=false
          Categories=System;
          X-KDE-SubstituteUID=false
          HYPR_START_EOF
          chmod +x /home/cybr/Desktop/Start_Hyprland.desktop
          
          # Create informational README about Hyprland
          cat > /home/cybr/Desktop/HYPRLAND_README.txt << 'README_EOF'
          Hyprland on Cybr Linux
          ======================
          
          Hyprland is now installed with end-4's beautiful dotfiles!
          
          Getting Started:
          ----------------
          1. Log out of the current session
          2. At SDDM login screen, select "Hyprland" from session menu
          3. Log in with your credentials
          
          Or from terminal:
          $ Hyprland
          
          Key Bindings (end-4 defaults):
          ------------------------------
          Super + Q          - Close window
          Super + Return     - Open terminal (Kitty)
          Super + D          - Application launcher (Wofi)
          Super + F          - Toggle fullscreen
          Super + V          - Toggle floating
          Super + [1-9]      - Switch workspace
          Super + Shift + [1-9] - Move window to workspace
          Super + Mouse      - Move/resize windows
          
          Dotfiles Location:
          ------------------
          ~/.config/hypr/     - Hyprland config
          ~/.config/ags/      - AGS widgets config
          ~/.config/waybar/   - Waybar config (if used)
          
          Customization:
          -------------
          end-4's dotfiles include:
          - Beautiful AGS widgets and panels
          - Color generation system
          - Multiple style options
          - Advanced animations and effects
          
          Edit ~/.config/hypr/hyprland.conf to customize
          
          Troubleshooting:
          ---------------
          If dotfiles didn't install automatically:
          $ bash <(curl -s https://ii.clsty.link/setup)
          
          More info: https://github.com/end-4/dots-hyprland
          
          Enjoy your beautiful Hyprland setup!
          README_EOF
          
          # Set proper ownership
          chown -R cybr:cybr /home/cybr/
          
          echo "Hyprland with end-4 dotfiles setup completed!"
          echo "Users can now log into Hyprland from SDDM"
          HYPRLAND_EOF
          chmod +x config/hooks/normal/0395-hyprland-end4-setup.hook.chroot

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:buildx-stable-1

      - name: "Create Debian Build Environment"
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          FROM debian:bookworm
          
          # Install build dependencies
          RUN apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                  debootstrap live-build xorriso squashfs-tools \
                  git curl wget ca-certificates gnupg2 \
                  syslinux-utils isolinux mtools rsync \
                  dosfstools parted gdisk \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          
          WORKDIR /build
          COPY scripts/ ./scripts/
          RUN find ./scripts -name "*.sh" -o -name "*.bash" | xargs chmod +x
          
          ENV DEBIAN_FRONTEND=noninteractive
          ENV LANG=C.UTF-8
          ENV LC_ALL=C.UTF-8
          DOCKERFILE_EOF

      - name: "Build Docker Image"
        run: |
          echo "Building Debian build environment..."
          docker build -t cybr-debian-builder:${{ needs.validate.outputs.build_hash }} .

      - name: "Create Build Scripts"
        run: |
          mkdir -p scripts config
          
          # Main build script
          cat > scripts/build-debian-iso.sh << 'BUILD_EOF'
          #!/bin/bash
          set -euo pipefail
          
          BUILD_VARIANT="${BUILD_VARIANT:-standard}"
          BUILD_VERSION="${BUILD_VERSION:-1}"
          ISO_NAME="${ISO_NAME:-cybr-nextgen}"
          
          echo "Starting Debian-based Cybr build..."
          echo "Variant: $BUILD_VARIANT"
          echo "Version: $BUILD_VERSION"
          
          # Setup live-build configuration
          mkdir -p /build/live-build
          cd /build/live-build
          
          # Configure live-build for Debian with non-interactive mode
          lb config \
            --distribution bookworm \
            --archive-areas "main contrib non-free non-free-firmware" \
            --architectures amd64 \
            --linux-flavours amd64 \
            --bootappend-live "boot=live components username=cybr hostname=cybr-nextgen quiet splash" \
            --iso-application "Cybr NextGen Security OS" \
            --iso-publisher "WolfTech Innovations" \
            --iso-volume "CybrNextGen" \
            --binary-images iso-hybrid \
            --memtest none \
            --win32-loader false \
            --checksums sha256 \
            --compression xz \
            --zsync false
          
          # Create global APT configuration for non-interactive mode
          mkdir -p config/apt
          cat > config/apt/apt.conf << 'APT_CONF_EOF'
          Dpkg::Options {
             "--force-confnew";
             "--force-confmiss";
             "--force-confdef";
             "--force-confold";
          }
          
          APT::Get::Assume-Yes "true";
          APT::Get::Fix-Broken "true";
          APT::Get::Allow-Unauthenticated "false";
          APT::Get::Allow-Downgrades "true";
          APT::Get::Allow-Remove-Essential "false";
          APT::Get::Allow-Change-Held-Packages "true";
          APT::Get::Remove "true";
          Dir::Cache::Archives "/var/cache/apt/archives";
          APT_CONF_EOF
          
          # Set global environment variables for the build
          mkdir -p config/includes.chroot/etc
          cat > config/includes.chroot/etc/environment << 'ENV_EOF'
          PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
          DEBIAN_FRONTEND=noninteractive
          DEBCONF_NONINTERACTIVE_SEEN=true
          APT_LISTCHANGES_FRONTEND=none
          ENV_EOF
          
          # Note: Kali repositories will be configured via hook with proper keyring
          
          # Kali repository setup hook - runs AFTER user creation with proper APT integration
          cat > config/hooks/normal/0350-kali-keyring.hook.chroot << 'KALI_KEY_HOOK_EOF'
          #!/bin/bash
          set -e
          
          echo "Setting up Kali Linux repositories with APT integration..."
          
          # Ensure non-interactive mode
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
          
          # First update existing package lists
          apt-get update
          
          # Install required packages for keyring management
          apt-get install -y --no-install-recommends wget gnupg2 ca-certificates curl
          
          # Add Kali GPG key using multiple methods for reliability
          echo "Adding Kali Linux GPG key..."
          
          # Method 1: Try keyserver first (most reliable)
          if gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6 2>/dev/null; then
            gpg --armor --export 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6 | apt-key add -
            echo "Kali GPG key added via keyserver"
          else
            # Method 2: Direct download fallback
            if curl -fsSL https://archive.kali.org/archive-key.asc | apt-key add -; then
              echo "Kali GPG key added via direct download"
            else
              echo "Warning: Could not add Kali GPG key"
              exit 1
            fi
          fi
          
          # Add Kali repositories to main sources list for proper APT integration
          echo "# Kali Linux Repository (for security tools)" >> /etc/apt/sources.list
          echo "deb [trusted=yes] http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware" >> /etc/apt/sources.list
          
          # Set APT preferences to prioritize Debian packages over Kali
          cat > /etc/apt/preferences.d/kali-priority << 'KALI_PREF_EOF'
          # Prioritize Debian packages over Kali to prevent system conflicts
          Package: *
          Pin: origin archive.debian.org
          Pin-Priority: 1000
          
          Package: *
          Pin: origin deb.debian.org  
          Pin-Priority: 1000
          
          Package: *
          Pin: origin http.kali.org
          Pin-Priority: 100
          
          # Allow Kali-specific packages to have normal priority
          Package: kali-*
          Pin: origin http.kali.org
          Pin-Priority: 500
          
          Package: metasploit-*
          Pin: origin http.kali.org
          Pin-Priority: 500
          KALI_PREF_EOF
          
          # Update APT package lists to include Kali repositories
          echo "Updating package lists with Kali repositories..."
          apt-get update || {
            echo "Warning: APT update failed, but continuing build..."
            # Don't fail the build if Kali repos are temporarily unavailable
          }
          
          # Create instructions file for users (ensure directory exists)
          mkdir -p /home/cybr/Desktop 2>/dev/null || true
          cat > /home/cybr/Desktop/KALI_TOOLS_README.txt << 'KALI_README_EOF'
          Kali Linux Tools Installation
          ==============================
          
          Cybr NextGen includes integrated access to Kali Linux security tools.
          The repositories are already configured and synchronized with APT.
          
          To install Kali security tools:
          1. Open terminal
          2. Update package lists: sudo apt update
          3. Install desired tools: sudo apt install <tool-name>
          
          Popular Kali tools available:
          - nmap (network scanner)
          - wireshark (network analyzer)  
          - metasploit-framework (penetration testing)
          - aircrack-ng (wireless security)
          - john (password cracker)
          - hashcat (password recovery)
          - sqlmap (SQL injection testing)
          - burpsuite (web security testing)
          - nikto (web vulnerability scanner)
          - dirb (web directory scanner)
          - hydra (login cracker)
          - gobuster (directory/file br