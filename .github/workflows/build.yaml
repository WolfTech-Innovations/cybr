name: "Cybr Linux - Dawn Light Shines Upon the Arches"

on:
  workflow_dispatch:
    inputs:
      build_variant:
        description: "Build variant"
        required: false
        default: "standard"
        type: choice
        options: ["minimal", "standard", "full"]
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 0'

env:
  ISO_NAME: "cybr-arch-v${{ github.run_number }}"
  BUILD_VERSION: ${{ github.run_number }}

jobs:
  build:
    name: "Build Cybr Arch Linux"
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Free Disk Space"
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache
          sudo apt-get clean
          df -h

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Create Arch Build Container"
        run: |
          cat > Dockerfile << 'EOF'
          FROM archlinux:latest
          
          RUN pacman -Syu --noconfirm && \
              pacman -S --noconfirm archiso git curl wget base-devel && \
              pacman -Scc --noconfirm
          
          WORKDIR /build
          EOF
          
          docker build -t cybr-arch-builder .

      - name: "Build Cybr Linux ISO"
        run: |
          docker run --rm --privileged \
            -v $PWD:/workspace \
            -e ISO_NAME="${{ env.ISO_NAME }}" \
            cybr-arch-builder \
            bash -c '
              set -euo pipefail
              
              echo "═══════════════════════════════════════════════"
              echo "  Dawn light shines upon the arches..."
              echo "  Building Cybr Linux with Hyprland"
              echo "═══════════════════════════════════════════════"
              
              # Copy archiso profile
              cp -r /usr/share/archiso/configs/releng /build/cybr
              cd /build/cybr
              
              # Add packages for Hyprland setup
              cat >> packages.x86_64 << "PKGS"
          hyprland
          xdg-desktop-portal-hyprland
          waybar
          wofi
          kitty
          dunst
          grim
          slurp
          wl-clipboard
          swaylock
          swayidle
          mako
          sddm
          firefox
          thunar
          thunar-volman
          mousepad
          pipewire
          pipewire-pulse
          pipewire-alsa
          wireplumber
          pavucontrol
          networkmanager
          network-manager-applet
          bluez
          bluez-utils
          blueman
          htop
          git
          curl
          wget
          base-devel
          brightnessctl
          playerctl
          pamixer
          nodejs
          npm
          gjs
          gtk-layer-shell
          ttf-dejavu
          ttf-font-awesome
          noto-fonts
          noto-fonts-emoji
          PKGS
              
              # Cybr branding
              echo "cybr-linux" > airootfs/etc/hostname
              
              cat > airootfs/etc/os-release << "OS"
          NAME="Cybr"
          ID=cybr
          BUILD_ID=rolling
          PRETTY_NAME="Cybr by WolfTech Innovations"
          HOME_URL="https://wolfos.uk/"
          OS
              
              # Setup scripts
              mkdir -p airootfs/usr/local/bin
              
              # BlackArch setup
              cat > airootfs/usr/local/bin/setup-blackarch << "BA"
          #!/bin/bash
          set -e
          cd /tmp
          curl -O https://blackarch.org/strap.sh
          chmod +x strap.sh
          sudo ./strap.sh
          rm strap.sh
          echo "BlackArch repos ready: sudo pacman -S <tool>"
          BA
              chmod +x airootfs/usr/local/bin/setup-blackarch
              
              # Neo hook
              curl -fsSL https://raw.githubusercontent.com/WolfTech-Innovations/Neo/main/lb-hooks/0201-Neo.chroot \
                -o airootfs/usr/local/bin/neo-enhancements 2>/dev/null || echo "Neo hook optional"
              chmod +x airootfs/usr/local/bin/neo-enhancements 2>/dev/null || true
              
              # First boot setup with end-4 dotfiles
              cat > airootfs/usr/local/bin/cybr-first-boot << "FB"
          #!/bin/bash
          FLAG="\$HOME/.config/cybr-setup-done"
          
          if [ ! -f "\$FLAG" ]; then
            notify-send "Cybr Linux" "Setting up end-4 dotfiles..." -i distributor-logo
            
            # Install end-4 dotfiles
            bash <(curl -s https://ii.clsty.link/setup) && \
              notify-send "Cybr Linux" "Dotfiles installed!" -i emblem-default || \
              notify-send "Cybr Linux" "Dotfiles failed - retry manually" -u critical
            
            # BlackArch repos
            /usr/local/bin/setup-blackarch && \
              notify-send "Cybr Linux" "Security tools available!" -i security-high
            
            # Neo enhancements
            [ -x /usr/local/bin/neo-enhancements ] && /usr/local/bin/neo-enhancements || true
            
            mkdir -p "\$HOME/.config"
            touch "\$FLAG"
            notify-send "Cybr Linux" "Setup complete! Relog to apply." -i emblem-default
          fi
          FB
              chmod +x airootfs/usr/local/bin/cybr-first-boot
              
              # Autostart
              mkdir -p airootfs/etc/skel/.config/autostart
              cat > airootfs/etc/skel/.config/autostart/cybr-setup.desktop << "AS"
          [Desktop Entry]
          Type=Application
          Name=Cybr Setup
          Exec=/usr/local/bin/cybr-first-boot
          Hidden=false
          NoDisplay=true
          X-GNOME-Autostart-enabled=true
          AS
              
              # SDDM config with auto-login for live session
              mkdir -p airootfs/etc/sddm.conf.d
              cat > airootfs/etc/sddm.conf.d/cybr.conf << "SDDM"
          [General]
          DisplayServer=wayland
          
          [Wayland]
          SessionDir=/usr/share/wayland-sessions
          
          [Autologin]
          User=cybr
          Session=hyprland
          SDDM
              
              # Enable services
              mkdir -p airootfs/etc/systemd/system/{multi-user.target.wants,graphical.target.wants}
              ln -sf /usr/lib/systemd/system/NetworkManager.service \
                airootfs/etc/systemd/system/multi-user.target.wants/
              ln -sf /usr/lib/systemd/system/sddm.service \
                airootfs/etc/systemd/system/graphical.target.wants/
              
              # Build ISO
              echo "Building ISO..."
              mkarchiso -v -w /tmp/work -o /tmp/out .
              
              # Move to workspace
              mv /tmp/out/*.iso /workspace/${ISO_NAME}.iso
              
              echo "═══════════════════════════════════════════════"
              echo "  Cybr Linux ISO created successfully!"
              echo "  File: ${ISO_NAME}.iso"
              echo "═══════════════════════════════════════════════"
            '

      - name: "Validate ISO"
        id: validate
        run: |
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          
          if [[ ! -f "$ISO_FILE" ]]; then
            echo "ERROR: ISO not found"
            exit 1
          fi
          
          SIZE=$(stat -c%s "$ISO_FILE")
          SIZE_MB=$(( SIZE / 1024 / 1024 ))
          SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)
          
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          
          echo "ISO: $ISO_FILE"
          echo "Size: ${SIZE_MB} MB"
          echo "SHA256: $SHA256"

      - name: "Upload ISO"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ISO_NAME }}"
          path: "${{ env.ISO_NAME }}.iso"
          retention-days: 7

  upload:
    name: "Upload to SourceForge"
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
      - name: "Download ISO"
        uses: actions/download-artifact@v4
        with:
          name: "cybr-arch-v${{ github.run_number }}"

      - name: "Install Upload Tools"
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: "Upload to SourceForge"
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
        run: |
          if [[ -z "$SF_USER" || -z "$SF_PASS" ]]; then
            echo "SourceForge credentials not configured"
            exit 1
          fi
          
          ISO_FILE="cybr-arch-v${{ github.run_number }}.iso"
          REMOTE_PATH="/home/frs/project/wolfos/$ISO_FILE"
          
          echo "Uploading $ISO_FILE to SourceForge..."
          
          for i in {1..3}; do
            if timeout 1800 sshpass -p "$SF_PASS" \
              rsync -avP --progress \
              -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              "./$ISO_FILE" \
              "$SF_USER@frs.sourceforge.net:$REMOTE_PATH"; then
              echo "Upload completed successfully"
              break
            elif [[ $i -eq 3 ]]; then
              echo "Upload failed after 3 attempts"
              exit 1
            else
              echo "Upload attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "ISO uploaded to SourceForge!"
          echo "Download: https://sourceforge.net/projects/wolfos/files/$ISO_FILE/download"

  notify:
    name: "Notify"
    runs-on: ubuntu-latest
    needs: [build, upload]
    if: always()
    
    steps:
      - name: "Summary"
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # Cybr Linux - Arch Build Summary
          
          **Dawn light shines upon the arches** - Build completed!
          
          ## Features
          - Base: Arch Linux (rolling release)
          - Desktop: Hyprland + end-4 dotfiles
          - Security: BlackArch repositories (Kali equivalent)
          - Enhancements: Neo integration
          - ISO: cybr-arch-v${{ github.run_number }}.iso
          
          ## Downloads
          - [Artifact](../../actions/runs/${{ github.run_id }}#artifacts)
          - [SourceForge](https://sourceforge.net/projects/wolfos/)
          EOF