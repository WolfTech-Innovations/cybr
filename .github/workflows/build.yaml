name: "Cybr NextGen Build System"

on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force build failure for testing"
        required: false
        default: "false"
        type: boolean
      build_variant:
        description: "Build variant"
        required: false
        default: "standard"
        type: choice
        options: ["minimal", "standard", "full"]
      skip_upload:
        description: "Skip upload to SourceForge"
        required: false
        default: "false"
        type: boolean
  push:
    branches: [main, develop]
    paths: ['scripts/**', 'config/**', '.github/workflows/build.yml']
  schedule:
    - cron: '0 2 * * 0' # Weekly builds on Sunday 2AM UTC

env:
  DOCKER_BUILDKIT: 1
  BUILDX_CACHE_TO: type=gha,mode=max
  BUILDX_CACHE_FROM: type=gha
  BUILD_VERSION: ${{ github.run_number }}
  ISO_NAME: "cybr-nextgen-v${{ github.run_number }}"

jobs:
  # ============================================================================
  #                           PRE-BUILD VALIDATION
  # ============================================================================
  validate:
    name: "🔍 Pre-Build Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: "ASCII Art Banner"
        run: |
          cat << 'EOF'
          
          ╔═══════════════════════════════════════════════════════════════════════╗
          ║                                                                       ║
          ║    ▄████▄▓██   ██▓ ▄▄▄▄    ██▀███      ▄▄▄▄    █    ██  ██▓ ██▓   ▄▄▄▄   ║
          ║   ▒██▀ ▀█ ▒██  ██▒▓█████▄ ▓██ ▒ ██▒   ▓█████▄  ██  ▓██▒▓██▒▓██▒  ▓█████▄ ║
          ║   ▒▓█    ▄ ▒██ ██░▒██▒ ▄██▓██ ░▄█ ▒   ▒██▒ ▄██▓██  ▒██░▒██▒▒██░  ▒██▒ ▄██║
          ║   ▒▓▓▄ ▄██▒░ ▐██▓░▒██░█▀  ▒██▀▀█▄     ▒██░█▀  ▓▓█  ░██░░██░▒██░  ▒██░█▀  ║
          ║   ▒ ▓███▀ ░░ ██▒▓░░▓█  ▀█▓░██▓ ▒██▒   ░▓█  ▀█▓▒▒█████▓ ░██░░██████▒█  ▀█▓║
          ║   ░ ░▒ ▒  ░ ██▒▒▒ ░▒▓███▀▒░ ▒▓ ░▒▓░   ░▒▓███▀▒░▒▓▒ ▒ ▒ ░▓  ░ ▒░▓  ░▒▓███▀▒║
          ║     ░  ▒  ▓██ ░▒░ ▒░▒   ░   ░▒ ░ ▒░   ▒░▒   ░ ░░▒░ ░ ░  ▒ ░░ ░ ▒  ░▒   ░ ║
          ║   ░       ▒ ▒ ░░   ░    ░   ░░   ░     ░    ░  ░░░ ░ ░  ▒ ░  ░ ░   ░    ░ ║
          ║   ░ ░     ░ ░      ░         ░         ░         ░      ░      ░  ░      ║
          ║   ░       ░ ░           ░                   ░                        ░    ║
          ║                                                                       ║
          ║                    NEXT-GENERATION SECURITY OS BUILDER               ║
          ║                                                                       ║
          ╚═══════════════════════════════════════════════════════════════════════╝
          
          EOF
          
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Generate Build Hash"
        id: hash
        run: |
          HASH=$(echo "${{ github.sha }}-${{ github.event.inputs.build_variant }}-${{ github.run_number }}" | sha256sum | cut -d' ' -f1 | head -c 16)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Build Hash: $HASH"
          
      - name: "Validation Checks"
        id: check
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          
          echo "┌─────────────────────────────────────────┐"
          echo "│           VALIDATION REPORT             │"
          echo "├─────────────────────────────────────────┤"
          echo "│ Build Variant: ${{ github.event.inputs.build_variant || 'standard' }}"
          echo "│ Force Fail:    ${{ github.event.inputs.force_fail || 'false' }}"
          echo "│ Skip Upload:   ${{ github.event.inputs.skip_upload || 'false' }}"
          echo "│ Build Number:  ${{ github.run_number }}"
          echo "│ Trigger:       ${{ github.event_name }}"
          echo "└─────────────────────────────────────────┘"

  # ============================================================================
  #                              MAIN BUILD JOB
  # ============================================================================
  build:
    name: "🏗️ Build Cybr OS"
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    timeout-minutes: 340
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      iso_size: ${{ steps.iso-info.outputs.size }}
      iso_sha256: ${{ steps.iso-info.outputs.sha256 }}

    steps:
      - name: "Build Progress Banner"
        run: |
          cat << 'EOF'
          
          ╔══════════════════════════════════════════════════════════════════════╗
          ║  ██████╗ ██╗   ██╗██╗██╗     ██████╗     ███████╗████████╗ █████╗   ║
          ║  ██╔══██╗██║   ██║██║██║     ██╔══██╗    ██╔════╝╚══██╔══╝██╔══██╗  ║
          ║  ██████╔╝██║   ██║██║██║     ██║  ██║    ███████╗   ██║   ███████║  ║
          ║  ██╔══██╗██║   ██║██║██║     ██║  ██║    ╚════██║   ██║   ██╔══██║  ║
          ║  ██████╔╝╚██████╔╝██║███████╗██████╔╝    ███████║   ██║   ██║  ██║  ║
          ║  ╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝     ╚══════╝   ╚═╝   ╚═╝  ╚═╝  ║
          ╚══════════════════════════════════════════════════════════════════════╝
          
          EOF

      - name: "Maximize Build Space"
        run: |
          echo "Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          df -h

      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:buildx-stable-1

      - name: "Create Debian Build Environment"
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          FROM debian:bookworm
          
          # Install build dependencies
          RUN apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                  debootstrap live-build xorriso squashfs-tools \
                  git curl wget ca-certificates gnupg2 \
                  syslinux-utils isolinux mtools rsync \
                  dosfstools parted gdisk \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          
          WORKDIR /build
          COPY scripts/ ./scripts/
          RUN find ./scripts -name "*.sh" -o -name "*.bash" | xargs chmod +x
          
          ENV DEBIAN_FRONTEND=noninteractive
          ENV LANG=C.UTF-8
          ENV LC_ALL=C.UTF-8
          DOCKERFILE_EOF

      - name: "Build Docker Image"
        run: |
          echo "Building Debian build environment..."
          docker build -t cybr-debian-builder:${{ needs.validate.outputs.build_hash }} .

      - name: "Create Build Scripts"
        run: |
          mkdir -p scripts config
          
          # Main build script
          cat > scripts/build-debian-iso.sh << 'BUILD_EOF'
          #!/bin/bash
          set -euo pipefail
          
          BUILD_VARIANT="${BUILD_VARIANT:-standard}"
          BUILD_VERSION="${BUILD_VERSION:-1}"
          ISO_NAME="${ISO_NAME:-cybr-nextgen}"
          
          echo "Starting Debian-based Cybr build..."
          echo "Variant: $BUILD_VARIANT"
          echo "Version: $BUILD_VERSION"
          
          # Setup live-build configuration
          mkdir -p /build/live-build
          cd /build/live-build
          
          # Configure live-build for Debian with non-interactive mode
          lb config \
            --distribution bookworm \
            --archive-areas "main contrib non-free non-free-firmware" \
            --architectures amd64 \
            --linux-flavours amd64 \
            --bootappend-live "boot=live components username=cybr hostname=cybr-nextgen quiet splash" \
            --iso-application "Cybr NextGen Security OS" \
            --iso-publisher "WolfTech Innovations" \
            --iso-volume "CybrNextGen" \
            --binary-images iso-hybrid \
            --memtest none \
            --win32-loader false \
            --checksums sha256 \
            --compression xz \
            --zsync false
          
          # Create global APT configuration for non-interactive mode
          mkdir -p config/apt
          cat > config/apt/apt.conf << 'APT_CONF_EOF'
          Dpkg::Options {
             "--force-confnew";
             "--force-confmiss";
             "--force-confdef";
             "--force-confold";
          }
          
          APT::Get::Assume-Yes "true";
          APT::Get::Fix-Broken "true";
          APT::Get::force-yes "true";
          APT::Get::Remove "true";
          Dir::Cache::Archives "/var/cache/apt/archives";
          APT_CONF_EOF
          
          # Set global environment variables for the build
          mkdir -p config/includes.chroot/etc
          cat > config/includes.chroot/etc/environment << 'ENV_EOF'
          PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
          DEBIAN_FRONTEND=noninteractive
          DEBCONF_NONINTERACTIVE_SEEN=true
          APT_LISTCHANGES_FRONTEND=none
          ENV_EOF
          
          # Note: Kali repositories will be configured via hook with proper keyring
          
          # Kali repository setup hook - robust and defensive
          cat > config/hooks/normal/0050-kali-keyring.hook.chroot << 'KALI_KEY_HOOK_EOF'
          #!/bin/bash
          set -e
          
          echo "Setting up Kali Linux repositories..."
          
          # Ensure non-interactive mode
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
          
          # Update package lists first
          apt-get update
          
          # Install required packages for keyring management (with error handling)
          apt-get install -y --no-install-recommends wget gnupg2 ca-certificates curl || {
            echo "Warning: Some packages failed to install, continuing..."
          }
          
          # Method 1: Try to get the key via keyserver (most reliable)
          if gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6 2>/dev/null; then
            gpg --armor --export 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6 | apt-key add -
            echo "Kali GPG key added via keyserver"
          else
            # Method 2: Fallback - try direct download
            if wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add - 2>/dev/null; then
              echo "Kali GPG key added via direct download"
            else
              echo "Warning: Could not add Kali GPG key, repositories will be unsigned"
              echo "Users can manually add the key later if needed"
            fi
          fi
          
          # Add Kali repositories with error handling
          cat > /etc/apt/sources.list.d/kali.list << 'KALI_SOURCES_EOF'
          # Kali Linux Repository (tools available for manual installation)
          # deb http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware
          # Uncomment the above line to enable Kali repositories
          # Then run: apt update && apt install <kali-tool-name>
          KALI_SOURCES_EOF
          
          # Create instructions file for users
          cat > /home/cybr/Desktop/KALI_TOOLS_README.txt << 'KALI_README_EOF'
          Kali Linux Tools Installation
          ==============================
          
          Cybr NextGen includes access to Kali Linux security tools, but they are not pre-installed
          to keep the system lightweight and stable.
          
          To enable Kali repositories:
          1. Edit /etc/apt/sources.list.d/kali.list as root
          2. Uncomment the repository line
          3. Run: sudo apt update
          4. Install tools: sudo apt install <tool-name>
          
          Popular Kali tools you might want to install:
          - nmap (network scanner)
          - wireshark (network analyzer)  
          - metasploit-framework (penetration testing)
          - aircrack-ng (wireless security)
          - john (password cracker)
          - hashcat (password recovery)
          - sqlmap (SQL injection)
          - burpsuite (web security)
          - nikto (web scanner)
          - dirb (web directory scanner)
          
          Example:
          sudo apt update
          sudo apt install nmap wireshark
          
          Note: Some tools may require additional configuration or have dependencies.
          Always review tool documentation before use.
          KALI_README_EOF
          
          chown cybr:cybr /home/cybr/Desktop/KALI_TOOLS_README.txt 2>/dev/null || true
          
          echo "Kali repositories configured (disabled by default for stability)"
          KALI_KEY_HOOK_EOF
          chmod +x config/hooks/normal/0050-kali-keyring.hook.chroot
          
          # Create package lists based on variant
          mkdir -p config/package-lists
          
          # Base system packages
          cat > config/package-lists/base.list.chroot << 'BASE_EOF'
          # Base system
          live-task-standard
          sudo
          openssh-client
          openssh-server
          curl
          wget
          git
          nano
          htop
          tree
          file
          
          # Network tools
          net-tools
          iputils-ping
          dnsutils
          whois
          nmap
          netcat-traditional
          
          # Basic security
          ufw
          fail2ban
          clamav
          clamav-freshclam
          BASE_EOF
          
          # Desktop environment for standard/full builds
          if [[ "$BUILD_VARIANT" != "minimal" ]]; then
            cat > config/package-lists/desktop.list.chroot << 'DESKTOP_EOF'
          # KDE Plasma Desktop
          kde-plasma-desktop
          plasma-workspace
          plasma-nm
          kde-config-sddm
          
          # Display Manager
          sddm
          
          # Calamares Installer
          calamares
          calamares-settings-debian
          
          # Essential KDE applications
          dolphin
          konsole
          kate
          firefox-esr
          
          # System utilities
          partitionmanager
          kde-spectacle
          ark
          DESKTOP_EOF
          fi
          
          # Additional packages for full build
          if [[ "$BUILD_VARIANT" == "full" ]]; then
            cat > config/package-lists/full.list.chroot << 'FULL_EOF'
          # Development tools
          code
          git-gui
          
          # Media
          vlc
          gimp
          
          # Office
          libreoffice
          
          # Network analysis (from Kali repos)
          wireshark
          tcpdump
          FULL_EOF
          fi
          
          # Create hooks for customization
          mkdir -p config/hooks/normal
          
          # Pre-configuration hook to prevent dpkg conflicts
          cat > config/hooks/normal/0010-prevent-conflicts.hook.chroot << 'PRECONFIG_EOF'
          #!/bin/bash
          set -e
          
          echo "Configuring system for non-interactive package management..."
          
          # Set environment variables
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
          export APT_LISTCHANGES_FRONTEND=none
          export NEEDRESTART_MODE=a
          export NEEDRESTART_SUSPEND=1
          
          # Configure debconf for non-interactive mode
          echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
          echo 'debconf debconf/priority select critical' | debconf-set-selections
          
          # Configure dpkg to handle configuration file conflicts automatically
          cat > /etc/apt/apt.conf.d/99local << 'DPKG_CONF_EOF'
          Dpkg::Options {
             "--force-confnew";
             "--force-confmiss";
             "--force-confdef";
             "--force-confold";
          }
          
          APT::Get::Assume-Yes "true";
          APT::Get::Fix-Broken "true";
          APT::Get::AllowUnauthenticated "false";
          APT::Install-Recommends "false";
          APT::Install-Suggests "false";
          APT::Get::Show-Upgraded "true";
          Dpkg::Use-Pty "0";
          DPKG_CONF_EOF
          
          # Create debconf selections to avoid interactive prompts
          cat > /tmp/debconf-selections << 'DEBCONF_EOF'
          # Prevent grub from asking about installation
          grub-pc grub-pc/install_devices_disks_changed multiselect
          grub-pc grub-pc/install_devices multiselect
          
          # Prevent keyboard configuration prompts
          keyboard-configuration keyboard-configuration/layout select
          keyboard-configuration keyboard-configuration/layoutcode string us
          
          # Prevent tzdata prompts
          tzdata tzdata/Areas select Etc
          tzdata tzdata/Zones/Etc select UTC
          
          # Prevent postfix prompts
          postfix postfix/main_mailer_type select No configuration
          
          # Base-files configuration to prevent /etc/issue conflicts
          base-files base-files/use_local_etc_issue boolean true
          DEBCONF_EOF
          
          debconf-set-selections < /tmp/debconf-selections
          rm -f /tmp/debconf-selections
          
          echo "Non-interactive configuration completed"
          PRECONFIG_EOF
          chmod +x config/hooks/normal/0010-prevent-conflicts.hook.chroot
          
          # Cybr branding hook with dpkg conflict handling
          cat > config/hooks/normal/0100-cybr-branding.hook.chroot << 'BRAND_EOF'
          #!/bin/bash
          set -e
          
          echo "Applying Cybr NextGen branding..."
          
          # Configure dpkg to handle conffile conflicts automatically
          export DEBIAN_FRONTEND=noninteractive
          export DEBCONF_NONINTERACTIVE_SEEN=true
          
          # Set dpkg options to avoid interactive prompts
          echo 'DPkg::options { "--force-confdef"; "--force-confold"; }' > /etc/apt/apt.conf.d/local
          
          # Update OS identification files BEFORE any package updates
          cat > /etc/os-release << 'OS_EOF'
          PRETTY_NAME="Cybr NextGen"
          NAME="Cybr NextGen"
          VERSION_ID="1.0"
          VERSION="1.0 (NextGen)"
          VERSION_CODENAME=nextgen
          ID=cybr
          ID_LIKE=debian
          HOME_URL="https://cybr-nextgen.org/"
          SUPPORT_URL="https://support.cybr-nextgen.org/"
          BUG_REPORT_URL="https://bugs.cybr-nextgen.org/"
          OS_EOF
          
          # Create backup and update issue files
          cp /etc/issue /etc/issue.backup 2>/dev/null || true
          cp /etc/issue.net /etc/issue.net.backup 2>/dev/null || true
          
          cat > /etc/issue << 'ISSUE_EOF'
          Cybr NextGen Security OS \n \l
          
          ISSUE_EOF
          
          cat > /etc/issue.net << 'ISSUE_NET_EOF'
          Cybr NextGen Security OS
          ISSUE_NET_EOF
          
          # Mark these files as locally modified to prevent dpkg conflicts
          dpkg-divert --local --rename --add /etc/issue
          dpkg-divert --local --rename --add /etc/issue.net
          
          # Create version info
          cat > /etc/cybr-version << 'VERSION_EOF'
          Cybr NextGen Security OS
          Version: $BUILD_VERSION
          Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Builder: GitHub Actions
          Variant: $BUILD_VARIANT
          VERSION_EOF
          
          echo "Branding applied successfully"
          BRAND_EOF
          chmod +x config/hooks/normal/0100-cybr-branding.hook.chroot
          
          # SDDM configuration hook
          cat > config/hooks/normal/0200-sddm-config.hook.chroot << 'SDDM_EOF'
          #!/bin/bash
          set -e
          
          echo "Configuring SDDM..."
          
          # Enable SDDM service
          systemctl enable sddm
          
          # Configure SDDM theme
          mkdir -p /etc/sddm.conf.d
          cat > /etc/sddm.conf.d/cybr.conf << 'SDDM_CONF_EOF'
          [Theme]
          Current=breeze
          
          [Users]
          MaximumUid=60513
          MinimumUid=500
          
          [Autologin]
          Relogin=false
          Session=
          User=
          SDDM_CONF_EOF
          
          echo "SDDM configured successfully"
          SDDM_EOF
          chmod +x config/hooks/normal/0200-sddm-config.hook.chroot
          
          # User setup hook
          cat > config/hooks/normal/0300-user-setup.hook.chroot << 'USER_EOF'
          #!/bin/bash
          set -e
          
          echo "Setting up default user..."
          
          # Create cybr user
          useradd -m -s /bin/bash -G sudo cybr
          echo "cybr:cybr" | chpasswd
          
          # Configure automatic login for live session
          mkdir -p /etc/systemd/system/getty@tty1.service.d
          cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << 'AUTOLOGIN_EOF'
          [Service]
          ExecStart=
          ExecStart=-/sbin/agetty --autologin cybr --noclear %I $TERM
          AUTOLOGIN_EOF
          
          # Desktop launcher for Calamares (if desktop variant)
          if [[ "$BUILD_VARIANT" != "minimal" ]]; then
            mkdir -p /home/cybr/Desktop
            cat > /home/cybr/Desktop/calamares.desktop << 'LAUNCHER_EOF'
          [Desktop Entry]
          Type=Application
          Version=1.0
          Name=Install Cybr NextGen
          Comment=Install the system to your computer
          Icon=drive-harddisk
          Exec=pkexec calamares
          Terminal=false
          StartupNotify=true
          Categories=System;
          X-KDE-SubstituteUID=true
          LAUNCHER_EOF
          
          chmod +x /home/cybr/Desktop/calamares.desktop
          chown cybr:cybr /home/cybr/Desktop/calamares.desktop
          fi
          
          echo "User and installer setup completed"
          USER_EOF
          chmod +x config/hooks/normal/0300-user-setup.hook.chroot
          
          # Network configuration hook
          cat > config/hooks/normal/0500-network.hook.chroot << 'NETWORK_EOF'
          #!/bin/bash
          set -e
          
          echo "Configuring network settings..."
          
          # Enable NetworkManager
          systemctl enable NetworkManager
          systemctl enable systemd-resolved
          
          # Configure basic firewall
          ufw --force enable
          ufw default deny incoming
          ufw default allow outgoing
          
          echo "Network configuration completed"
          NETWORK_EOF
          chmod +x config/hooks/normal/0500-network.hook.chroot
          
          # Final system cleanup hook
          cat > config/hooks/normal/9999-cleanup.hook.chroot << 'CLEANUP_EOF'
          #!/bin/bash
          set -e
          
          echo "Performing final system cleanup..."
          
          # Clean package cache
          apt-get autoremove --purge -y
          apt-get autoclean
          apt-get clean
          
          # Clear logs and temporary files
          find /var/log -type f -exec truncate -s 0 {} \;
          rm -rf /tmp/* /var/tmp/*
          rm -rf /var/cache/apt/archives/*.deb
          
          # Clear bash history
          rm -f /root/.bash_history
          rm -f /home/*/.bash_history
          
          # Remove SSH host keys (will be regenerated on first boot)
          rm -f /etc/ssh/ssh_host_*
          
          echo "System cleanup completed"
          CLEANUP_EOF
          chmod +x config/hooks/normal/9999-cleanup.hook.chroot
          
          # Calamares configuration for installer
          if [[ "$BUILD_VARIANT" != "minimal" ]]; then
            cat > config/hooks/normal/0400-calamares.hook.chroot << 'CALAMARES_EOF'
          #!/bin/bash
          set -e
          
          echo "Configuring Calamares installer..."
          
          # Ensure Calamares is installed
          apt-get update
          apt-get install -y calamares
          
          # Create Calamares configuration directory
          mkdir -p /etc/calamares
          
          # Main settings configuration
          cat > /etc/calamares/settings.conf << 'CAL_SETTINGS_EOF'
          modules-search: [ local ]
          
          instances:
          - id:       rootfs
            module:   unpackfs
            config:   unpackfs_rootfs.conf
          
          sequence:
          - show:
            - welcome
            - locale
            - keyboard
            - partition
            - users
            - summary
          - exec:
            - partition
            - mount
            - unpackfs@rootfs
            - machineid
            - fstab
            - locale
            - keyboard
            - localecfg
            - users
            - removeuser
            - displaymanager
            - networkcfg
            - hwclock
            - services-systemd
            - bootloader
            - umount
          - show:
            - finished
          
          branding: cybr
          prompt-install: false
          dont-chroot: false
          oem-setup: false
          disable-cancel: false
          disable-cancel-during-exec: false
          hide-back-and-next-during-exec: false
          quit-at-end: false
          CAL_SETTINGS_EOF
          
          # Create branding configuration
          mkdir -p /etc/calamares/branding/cybr
          cat > /etc/calamares/branding/cybr/branding.desc << 'BRAND_DESC_EOF'
          componentName:  cybr
          
          strings:
              productName:         "Cybr NextGen"
              shortProductName:    "Cybr"
              version:             "1.0"
              shortVersion:        "1.0"
              versionedName:       "Cybr NextGen 1.0"
              shortVersionedName:  "Cybr 1.0"
              bootloaderEntryName: "Cybr NextGen"
              productUrl:          "https://cybr-nextgen.org/"
              supportUrl:          "https://support.cybr-nextgen.org/"
              knownIssuesUrl:      "https://bugs.cybr-nextgen.org/"
              releaseNotesUrl:     "https://cybr-nextgen.org/releases/"
          
          images:
              productLogo:         "logo.png"
              productIcon:         "logo.png"
              productWelcome:      "welcome.png"
          
          style:
             sidebarBackground:    "#1d99f3"
             sidebarText:          "#ffffff"
             sidebarTextSelect:    "#4d4d4d"
             sidebarTextCurrent:   "#292929"
          BRAND_DESC_EOF
          
          # Configure display manager module
          cat > /etc/calamares/modules/displaymanager.conf << 'DM_CONF_EOF'
          displaymanagers:
            - sddm
            - gdm
            - lightdm
          
          basicSetup: false
          sysconfigSetup: false
          SDDM_CONFIG_FILE: "/etc/sddm.conf"
          DM_CONF_EOF
          
          # Configure unpackfs module
          cat > /etc/calamares/modules/unpackfs_rootfs.conf << 'UNPACK_EOF'
          unpack:
              -   source: "/run/live/medium/live/filesystem.squashfs"
                  sourcefs: "squashfs"
                  destination: ""
          UNPACK_EOF
          
          echo "Calamares configured successfully"
          CALAMARES_EOF
          chmod +x config/hooks/normal/0400-calamares.hook.chroot
          fi
          
          # Build the ISO with proper error handling
          echo "════════════════════════════════════════"
          echo "        EXECUTING LIVE-BUILD           "
          echo "════════════════════════════════════════"
          
          # Start the build process with timeout protection
          if timeout 7200 lb build 2>&1 | tee build.log; then
            echo "Live-build completed successfully"
          else
            BUILD_EXIT_CODE=$?
            echo "Live-build failed with exit code: $BUILD_EXIT_CODE"
            
            # Show the last 50 lines of the build log for debugging
            echo "Last 50 lines of build log:"
            tail -n 50 build.log || echo "Could not read build log"
            
            # Check for common build failures
            if grep -q "No space left on device" build.log; then
              echo "ERROR: Build failed due to insufficient disk space"
            elif grep -q "Package .* has no installation candidate" build.log; then
              echo "ERROR: Build failed due to missing packages"
            elif grep -q "404\|Connection refused" build.log; then
              echo "ERROR: Build failed due to network/repository issues"
            fi
            
            exit 1
          fi
          
          # Find the generated ISO file
          ISO_PATH=""
          if [ -f *.iso ]; then
            ISO_PATH=$(ls -1 *.iso | head -1)
          elif [ -f live-image-*.iso ]; then
            ISO_PATH=$(ls -1 live-image-*.iso | head -1)
          elif [ -f binary.iso ]; then
            ISO_PATH="binary.iso"
          fi
          
          if [[ -n "$ISO_PATH" && -f "$ISO_PATH" ]]; then
            echo "Moving ISO from $ISO_PATH to /build/${ISO_NAME}.iso"
            mv "$ISO_PATH" "/build/${ISO_NAME}.iso"
            
            # Verify the ISO file
            ISO_SIZE=$(stat -c%s "/build/${ISO_NAME}.iso")
            ISO_SIZE_MB=$((ISO_SIZE / 1024 / 1024))
            
            echo "════════════════════════════════════════"
            echo "          BUILD COMPLETED               "
            echo "════════════════════════════════════════"
            echo "ISO File: ${ISO_NAME}.iso"
            echo "Size: ${ISO_SIZE_MB} MB (${ISO_SIZE} bytes)"
            echo "Location: /build/${ISO_NAME}.iso"
            
            # Generate build summary
            cat > /build/BUILD_SUMMARY.txt << BUILD_SUMMARY_EOF
          Cybr NextGen Build Summary
          ==========================
          Build Date: $(date -u)
          Build Variant: $BUILD_VARIANT
          Build Version: $BUILD_VERSION
          ISO Name: ${ISO_NAME}.iso
          ISO Size: ${ISO_SIZE_MB} MB
          ISO Location: /build/${ISO_NAME}.iso
          
          Features Included:
          - Base: Debian Bookworm
          - Desktop: KDE Plasma + SDDM
          - Installer: Calamares
          - Security: Kali Linux repositories available
          - Network: NetworkManager + UFW firewall
          - Custom branding: Cybr NextGen theme
          
          Build completed successfully!
          BUILD_SUMMARY_EOF
            
            ls -lah "/build/${ISO_NAME}.iso"
            echo "Build summary saved to /build/BUILD_SUMMARY.txt"
            
          else
            echo "ERROR: ISO file not found after build completion"
            echo "Looking for ISO files in current directory:"
            find . -name "*.iso" -type f -ls || echo "No ISO files found"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          BUILD_EOF
          chmod +x scripts/build-debian-iso.sh

      - name: "Execute ISO Build"
        run: |
          echo "Starting Debian-based ISO build process..."
          
          docker run --rm \
            --privileged \
            -v $PWD:/build \
            -e BUILD_VARIANT="${{ github.event.inputs.build_variant || 'standard' }}" \
            -e BUILD_VERSION="${{ env.BUILD_VERSION }}" \
            -e ISO_NAME="${{ env.ISO_NAME }}" \
            cybr-debian-builder:${{ needs.validate.outputs.build_hash }} \
            ./scripts/build-debian-iso.sh

      - name: "Validate ISO Build"
        id: iso-info
        run: |
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          
          if [[ ! -f "$ISO_FILE" ]]; then
            echo "ERROR: ISO file not found: $ISO_FILE"
            exit 1
          fi
          
          # Get ISO information
          SIZE=$(stat -c%s "$ISO_FILE")
          SIZE_MB=$(( SIZE / 1024 / 1024 ))
          SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)
          
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          
          echo "┌─────────────────────────────────────────┐"
          echo "│            ISO BUILD SUMMARY            │"
          echo "├─────────────────────────────────────────┤"
          echo "│ File:      $ISO_FILE"
          echo "│ Size:      ${SIZE_MB} MB (${SIZE} bytes)"
          echo "│ SHA256:    $SHA256"
          echo "│ Status:    ✅ Build Successful"
          echo "└─────────────────────────────────────────┘"

      - name: "Set Build Status"
        id: build-status
        run: |
          if [[ "${{ github.event.inputs.force_fail }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            echo "⚠️ Build artificially failed due to force_fail=true"
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Build completed successfully"
          fi

      - name: "Upload ISO Artifact"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "${{ env.ISO_NAME }}"
          path: "${{ env.ISO_NAME }}.iso"
          retention-days: 7
          compression-level: 0

  # ============================================================================
  #                              UPLOAD JOB
  # ============================================================================
  upload:
    name: "📤 Upload to SourceForge"
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: |
      needs.build.outputs.build_success == 'true' && 
      github.event.inputs.skip_upload != 'true' &&
      (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
    timeout-minutes: 30

    steps:
      - name: "Download ISO Artifact"
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.ISO_NAME }}"

      - name: "Install Upload Dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: "Upload to SourceForge"
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
        run: |
          if [[ -z "$SF_USER" || -z "$SF_PASS" ]]; then
            echo "❌ SourceForge credentials not configured"
            exit 1
          fi
          
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          REMOTE_PATH="/home/frs/project/cybr-nextgen/$ISO_FILE"
          
          echo "Uploading $ISO_FILE to SourceForge..."
          
          for i in {1..3}; do
            if timeout 1800 sshpass -p "$SF_PASS" \
              rsync -avP --progress \
              -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              "./$ISO_FILE" \
              "$SF_USER@frs.sourceforge.net:$REMOTE_PATH"; then
              echo "✅ Upload completed successfully"
              break
            elif [[ $i -eq 3 ]]; then
              echo "❌ Upload failed after 3 attempts"
              exit 1
            else
              echo "⚠️ Upload attempt $i failed, retrying..."
              sleep 30
            fi
          done

  # ============================================================================
  #                            NOTIFICATION JOB
  # ============================================================================
  notify:
    name: "🔔 Send Notifications"
    runs-on: ubuntu-latest
    needs: [validate, build, upload]
    if: always()
    timeout-minutes: 5

    steps:
      - name: "Determine Overall Status"
        id: status
        run: |
          BUILD_STATUS="${{ needs.build.outputs.build_success }}"
          UPLOAD_STATUS="${{ needs.upload.result }}"
          
          if [[ "$BUILD_STATUS" == "true" ]]; then
            if [[ "$UPLOAD_STATUS" == "success" || "$UPLOAD_STATUS" == "skipped" ]]; then
              echo "overall_status=success" >> $GITHUB_OUTPUT
              echo "status_emoji=🎉" >> $GITHUB_OUTPUT
              echo "status_message=Build and upload completed successfully!" >> $GITHUB_OUTPUT
            else
              echo "overall_status=partial" >> $GITHUB_OUTPUT
              echo "status_emoji=⚠️" >> $GITHUB_OUTPUT
              echo "status_message=Build succeeded but upload failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "overall_status=failure" >> $GITHUB_OUTPUT
            echo "status_emoji=❌" >> $GITHUB_OUTPUT
            echo "status_message=Build pipeline failed" >> $GITHUB_OUTPUT
          fi

      - name: "Create Job Summary"
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY_EOF'
          # ${{ steps.status.outputs.status_emoji }} Cybr NextGen Build Summary
          
          ## Pipeline Results
          
          | Job | Status |
          |-----|--------|
          | **Validation** | ${{ (needs.validate.result == 'success' && '✅ Success') || '❌ Failed' }} |
          | **Build** | ${{ (needs.build.result == 'success' && '✅ Success') || '❌ Failed' }} |
          | **Upload** | ${{ (needs.upload.result == 'success' && '✅ Success') || (needs.upload.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} |
          
          ## Build Details
          
          | Parameter | Value |
          |-----------|-------|
          | **Build Number** | `#${{ github.run_number }}` |
          | **ISO Name** | `${{ env.ISO_NAME }}.iso` |
          | **Build Variant** | `${{ github.event.inputs.build_variant || 'standard' }}` |
          | **ISO Size** | `${{ needs.build.outputs.iso_size || 'N/A' }}` bytes |
          | **SHA256** | `${{ needs.build.outputs.iso_sha256 || 'N/A' }}` |
          
          ## Features
          
          - 🐧 **Base**: Debian Bookworm
          - 🖥️ **Desktop**: KDE Plasma with SDDM
          - 📦 **Installer**: Calamares
          - 🔧 **Repositories**: Kali Linux tools available
          - 🎨 **Branding**: Custom Cybr NextGen theme
          
          **Message:** ${{ steps.status.outputs.status_message }}
          SUMMARY_EOF

      - name: "Final Status Report"
        if: always()
        run: |
          echo ""
          echo "╔════════════════════════════════════════════════════════════════════════╗"
          echo "║                        🚀 CYBR NEXTGEN BUILD SYSTEM                   ║"
          echo "║                             EXECUTION COMPLETE                        ║"
          echo "╠════════════════════════════════════════════════════════════════════════╣"
          echo "║                                                                        ║"
          echo "║  Status: ${{ steps.status.outputs.status_emoji }} ${{ steps.status.outputs.overall_status }}                                                    ║"
          echo "║  Message: ${{ steps.status.outputs.status_message }}                   "
          echo "║                                                                        ║"
          echo "║  Build ID: ${{ github.run_number }}                                                     ║"
          echo "║  Repository: ${{ github.repository }}                         ║"
          echo "║  Commit: ${{ github.sha }}              ║"
          echo "║                                                                        ║"
          echo "║  Debian + KDE Plasma + Calamares + Kali Repos = Success!              ║"
          echo "║                                                                        ║"
          echo "╚════════════════════════════════════════════════════════════════════════╝"
          echo ""
          
          if [[ "${{ steps.status.outputs.overall_status }}" == "failure" ]]; then
            echo "Pipeline completed with failures"
            exit 1
          else
            echo "Pipeline completed successfully"
            exit 0
          fi

# ============================================================================
#                         SECURITY AND MAINTENANCE
# ============================================================================
  security-scan:
    name: "🔒 Security Scan"
    runs-on: ubuntu-latest
    needs: build
    if: |
      needs.build.outputs.build_success == 'true' && 
      (github.event_name == 'push' || github.event_name == 'schedule')
    timeout-minutes: 30
    continue-on-error: true

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Run Trivy Security Scan"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: "Upload Security Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "security-scan-${{ github.run_number }}"
          path: "trivy-results.sarif"

  cleanup:
    name: "🧹 Cleanup"
    runs-on: ubuntu-latest
    needs: [build, upload, notify, security-scan]
    if: always()
    timeout-minutes: 10

    steps:
      - name: "Free Resources"
        run: |
          docker system prune -af || true
          sudo apt-get clean || true
          df -h