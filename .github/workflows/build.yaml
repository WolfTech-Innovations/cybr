name: "Cybr Linux - Dawn Light Shines Upon the Arches"

on:
  workflow_dispatch:
    inputs:
      build_variant:
        description: "Build variant"
        required: false
        default: "standard"
        type: choice
        options: ["minimal", "standard", "full"]
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 0'

env:
  ISO_NAME: "cybr-arch-v${{ github.run_number }}"
  BUILD_VERSION: ${{ github.run_number }}

jobs:
  build:
    name: "Build Cybr Arch Linux"
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Free Disk Space"
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache
          sudo apt-get clean
          df -h

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Create Arch Build Container"
        run: |
          cat > Dockerfile << 'EOF'
          FROM archlinux:latest
          
          # Update system and install base packages
          RUN pacman -Syu --noconfirm && \
              pacman -S --noconfirm archiso git curl wget base-devel sudo fakeroot && \
              pacman -Scc --noconfirm
          
          # Create build user for AUR packages
          RUN useradd -m -G wheel -s /bin/bash builder && \
              echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          
          # Install yay as builder user
          USER builder
          WORKDIR /home/builder
          RUN git clone https://aur.archlinux.org/yay.git && \
              cd yay && \
              makepkg -si --noconfirm && \
              cd .. && \
              rm -rf yay
          
          # Pre-build AUR packages needed for end-4 dotfiles
          RUN yay -S --noconfirm --needed \
              python-materialyoucolor \
              python-material-color-utilities \
              nwg-dock-hyprland \
              adwaita-qt5 \
              adwaita-qt6 || true
          
          # Switch back to root for ISO building
          USER root
          WORKDIR /build
          EOF
          
          docker build -t cybr-arch-builder .

      - name: "Build Cybr Linux ISO"
        run: |
          docker run --rm --privileged \
            -v $PWD:/workspace \
            -e ISO_NAME="${{ env.ISO_NAME }}" \
            cybr-arch-builder \
            bash -c '
              set -euo pipefail
              
              echo "═══════════════════════════════════════════════"
              echo "  Dawn light shines upon the arches..."
              echo "  Building Cybr Linux with end-4 Hyprland"
              echo "═══════════════════════════════════════════════"
              
              # Copy archiso profile
              cp -r /usr/share/archiso/configs/releng /build/cybr
              cd /build/cybr
              
              # Add packages for end-4 Hyprland setup (illogical-impulse)
              cat >> packages.x86_64 << "PKGS"
          hyprland
          xdg-desktop-portal-hyprland
          qt5-wayland
          qt6-wayland
          kitty
          firefox
          thunar
          thunar-volman
          gvfs
          tumbler
          ffmpegthumbnailer
          file-roller
          mousepad
          pipewire
          pipewire-pulse
          pipewire-alsa
          wireplumber
          pavucontrol
          networkmanager
          network-manager-applet
          bluez
          bluez-utils
          blueman
          brightnessctl
          playerctl
          pamixer
          grim
          slurp
          wl-clipboard
          cliphist
          swww
          hyprpicker
          hypridle
          hyprlock
          wf-recorder
          nwg-look
          gtk3
          gtk4
          python
          python-pip
          python-gobject
          python-pillow
          python-requests
          python-pywayland
          python-psutil
          gjs
          gtk-layer-shell
          libdbusmenu-gtk3
          gnome-bluetooth-3.0
          power-profiles-daemon
          upower
          polkit-gnome
          gnome-keyring
          libsecret
          seahorse
          nodejs
          npm
          dart-sass
          meson
          ninja
          git
          curl
          wget
          jq
          imagemagick
          socat
          base-devel
          htop
          btop
          fastfetch
          greetd
          greetd-tuigreet
          ttf-jetbrains-mono-nerd
          ttf-font-awesome
          noto-fonts
          noto-fonts-emoji
          noto-fonts-cjk
          gcc
          python-dbus
          glib2
          PKGS
              
              # Cybr branding
              echo "cybr-linux" > airootfs/etc/hostname
              
              cat > airootfs/etc/os-release << "OS"
          NAME="Cybr"
          ID=cybr
          BUILD_ID=rolling
          PRETTY_NAME="Cybr by WolfTech Innovations"
          HOME_URL="https://wolfos.uk/"
          LOGO=cybr-logo
          OS
              
              # Setup scripts directory
              mkdir -p airootfs/usr/local/bin
              mkdir -p airootfs/usr/share/cybr
              
              # BlackArch setup script
              cat > airootfs/usr/local/bin/setup-blackarch << "BA"
          #!/bin/bash
          set -e
          echo "Setting up BlackArch repositories..."
          cd /tmp
          curl -O https://blackarch.org/strap.sh
          chmod +x strap.sh
          sudo ./strap.sh
          rm strap.sh
          sudo pacman -Sy
          echo ""
          echo "✓ BlackArch repositories configured!"
          echo "  Install security tools with: sudo pacman -S <tool-name>"
          echo "  Example: sudo pacman -S nmap metasploit burpsuite"
          BA
              chmod +x airootfs/usr/local/bin/setup-blackarch
              
              # Neo enhancements (optional)
              curl -fsSL https://raw.githubusercontent.com/WolfTech-Innovations/Neo/main/lb-hooks/0201-Neo.chroot \
                -o airootfs/usr/local/bin/neo-enhancements 2>/dev/null || echo "# Neo optional" > airootfs/usr/local/bin/neo-enhancements
              chmod +x airootfs/usr/local/bin/neo-enhancements 2>/dev/null || true
              
              # Setup AUR helper installation script for post-install
              mkdir -p airootfs/usr/local/bin
              cat > airootfs/usr/local/bin/install-aur-helper << "AURHELPER"
          #!/bin/bash
          # Install yay AUR helper for user
          if ! command -v yay &> /dev/null; then
            echo "Installing yay AUR helper..."
            cd /tmp
            git clone https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si --noconfirm
            cd ..
            rm -rf yay
            echo "✓ yay installed successfully"
          else
            echo "✓ yay already installed"
          fi
          AURHELPER
              chmod +x airootfs/usr/local/bin/install-aur-helper
              
              # First boot setup with end-4 dotfiles
              cat > airootfs/usr/local/bin/cybr-first-boot << "FB"
          #!/bin/bash
          FLAG="$HOME/.config/cybr-setup-done"
          
          if [ ! -f "$FLAG" ]; then
            # Wait for internet connection
            echo "Cybr Linux - Waiting for internet connection..."
            for i in {1..30}; do
              if ping -c 1 8.8.8.8 &>/dev/null || ping -c 1 1.1.1.1 &>/dev/null; then
                echo "Internet connected!"
                break
              fi
              if [ $i -eq 30 ]; then
                notify-send "Cybr Linux" "No internet connection. Setup will run on next boot." -u critical
                exit 1
              fi
              sleep 2
            done
            
            # Open terminal with setup wizard
            kitty --title "Cybr Linux Setup" bash -c '"'"'
              clear
              echo "╔═══════════════════════════════════════════════════════╗"
              echo "║                                                       ║"
              echo "║          🌅 Cybr Linux - First Boot Setup 🌅          ║"
              echo "║                by WolfTech Innovations                ║"
              echo "║                                                       ║"
              echo "╚═══════════════════════════════════════════════════════╝"
              echo ""
              echo "Welcome to Cybr Linux with end-4'"'"'s illogical-impulse!"
              echo ""
              echo "This setup will install:"
              echo "  • end-4'"'"'s beautiful Hyprland dotfiles (illogical-impulse)"
              echo "  • AGS (Aylur'"'"'s GTK Shell) for stunning widgets"
              echo "  • nwg-dock-hyprland for an elegant dock"
              echo "  • BlackArch security tool repositories"
              echo "  • Neo system enhancements"
              echo ""
              echo "Press Enter to continue or Ctrl+C to skip..."
              read
              
              echo ""
              echo "═══════════════════════════════════════════════════════"
              echo "Installing end-4 Hyprland Dotfiles (illogical-impulse)"
              echo "═══════════════════════════════════════════════════════"
              echo ""
              echo "Follow the interactive prompts to customize your setup."
              echo "Choose your preferred style and options."
              echo ""
              
              # Install end-4 dotfiles using the official installer
              if bash <(curl -fsSL "https://end-4.github.io/dots-hyprland-wiki/setup.sh"); then
                echo ""
                echo "✓ end-4 dotfiles installed successfully!"
                DOTFILES_OK=1
              else
                echo ""
                echo "✗ Dotfiles installation failed or was cancelled"
                DOTFILES_OK=0
              fi
              
              echo ""
              echo "═══════════════════════════════════════════════════════"
              echo "Setting up nwg-dock-hyprland"
              echo "═══════════════════════════════════════════════════════"
              
              # Configure nwg-dock-hyprland
              mkdir -p "$HOME/.config/nwg-dock-hyprland"
              
              cat > "$HOME/.config/nwg-dock-hyprland/style.css" << '"'"'DOCK_CSS'"'"'
          window {
            background-color: rgba(20, 20, 30, 0.8);
            border-radius: 15px;
            padding: 4px;
            margin: 0px;
          }
          
          #box {
            padding: 8px;
            background-color: transparent;
          }
          
          button {
            border-radius: 10px;
            padding: 8px;
            margin: 2px;
            background-color: transparent;
            color: #ffffff;
            border: none;
          }
          
          button:hover {
            background-color: rgba(100, 100, 150, 0.5);
          }
          
          button:focus {
            background-color: rgba(120, 120, 180, 0.6);
          }
          DOCK_CSS
              
              cat > "$HOME/.config/nwg-dock-hyprland/launch.sh" << '"'"'DOCK_LAUNCH'"'"'
          #!/bin/bash
          nwg-dock-hyprland -f -x -i 48 -nolauncher -a center -ml 8 -mr 8 -mb 8
          DOCK_LAUNCH
              chmod +x "$HOME/.config/nwg-dock-hyprland/launch.sh"
              
              # Add dock to Hyprland autostart
              if [ -f "$HOME/.config/hypr/hyprland.conf" ]; then
                if ! grep -q "nwg-dock-hyprland" "$HOME/.config/hypr/hyprland.conf"; then
                  echo "exec-once = ~/.config/nwg-dock-hyprland/launch.sh" >> "$HOME/.config/hypr/custom/execs.conf" 2>/dev/null || \
                  echo "exec-once = ~/.config/nwg-dock-hyprland/launch.sh" >> "$HOME/.config/hypr/hyprland.conf"
                fi
              fi
              
              echo "✓ nwg-dock configured!"
              
              echo ""
              echo "═══════════════════════════════════════════════════════"
              echo "Setting up BlackArch repositories"
              echo "═══════════════════════════════════════════════════════"
              
              if /usr/local/bin/setup-blackarch; then
                echo "✓ BlackArch repositories ready!"
              else
                echo "✗ BlackArch setup had issues (you can run setup-blackarch later)"
              fi
              
              echo ""
              if [ -x /usr/local/bin/neo-enhancements ]; then
                echo "═══════════════════════════════════════════════════════"
                echo "Running Neo enhancements"
                echo "═══════════════════════════════════════════════════════"
                /usr/local/bin/neo-enhancements || echo "✗ Neo enhancements had issues"
              fi
              
              echo ""
              echo "╔═══════════════════════════════════════════════════════╗"
              echo "║                                                       ║"
              echo "║              ✨ Setup Complete! ✨                     ║"
              echo "║                                                       ║"
              echo "╚═══════════════════════════════════════════════════════╝"
              echo ""
              echo "Next steps:"
              echo "  1. Log out of Hyprland (Super+Shift+Q)"
              echo "  2. Log back in to load all configurations"
              echo "  3. Explore with Super+/ to see all keybinds"
              echo "  4. Customize further in ~/.config/"
              echo ""
              echo "Useful commands:"
              echo "  • Super+Q     - Close window"
              echo "  • Super+T     - Terminal"
              echo "  • Super+R     - App launcher"
              echo "  • Super+L     - Lock screen"
              echo ""
              echo "This window will close in 15 seconds or press Enter..."
              read -t 15
            '"'"'
            
            mkdir -p "$HOME/.config"
            touch "$FLAG"
            
            if [ "${DOTFILES_OK:-0}" -eq 1 ]; then
              notify-send "Cybr Linux" "Setup completed! Log out and back in to apply all changes." \
                -i emblem-default -t 5000
            fi
          fi
          FB
              chmod +x airootfs/usr/local/bin/cybr-first-boot
              
              # Autostart configuration
              mkdir -p airootfs/etc/skel/.config/autostart
              cat > airootfs/etc/skel/.config/autostart/cybr-setup.desktop << "AS"
          [Desktop Entry]
          Type=Application
          Name=Cybr First Boot Setup
          Exec=/usr/local/bin/cybr-first-boot
          Hidden=false
          NoDisplay=true
          X-GNOME-Autostart-enabled=true
          AS
              
              # Create auto-login script for live session that launches Hyprland directly
              cat > airootfs/usr/local/bin/autologin-live << '"'"'AUTOLOGIN'"'"'
          #!/bin/bash
          # Auto-login for live session - launch Hyprland directly
          if [ -f /etc/cybr-live ]; then
            exec Hyprland --i-am-really-stupid
          else
            exec tuigreet --time --remember --cmd '"'"'Hyprland --i-am-really-stupid'"'"'
          fi
          AUTOLOGIN
              chmod +x airootfs/usr/local/bin/autologin-live
              
              # Mark as live session
              touch airootfs/etc/cybr-live
              
              # Configure greetd for auto-login in live session
              mkdir -p airootfs/etc/greetd
              cat > airootfs/etc/greetd/config.toml << '"'"'GREETD_LIVE'"'"'
          [terminal]
          vt = 1
          
          [default_session]
          command = "/usr/local/bin/autologin-live"
          user = "cybr"
          GREETD_LIVE
              
              # Polkit authentication agent
              mkdir -p airootfs/etc/skel/.config/hypr/custom
              cat > airootfs/etc/skel/.config/hypr/custom/polkit.conf << "POLKIT"
          exec-once = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
          POLKIT
              
              # Enable required services
              mkdir -p airootfs/etc/systemd/system/{multi-user.target.wants,graphical.target.wants}
              
              ln -sf /usr/lib/systemd/system/NetworkManager.service \
                airootfs/etc/systemd/system/multi-user.target.wants/ || true
              
              ln -sf /usr/lib/systemd/system/bluetooth.service \
                airootfs/etc/systemd/system/multi-user.target.wants/ || true
              
              ln -sf /usr/lib/systemd/system/greetd.service \
                airootfs/etc/systemd/system/graphical.target.wants/ || true
              
              # Create welcome message
              cat > airootfs/etc/motd << "MOTD"
          
          ╔═══════════════════════════════════════════════════════════════╗
          ║                                                               ║
          ║              🌅 Welcome to Cybr Linux 🌅                       ║
          ║                                                               ║
          ║         Dawn Light Shines Upon the Arches                    ║
          ║           by WolfTech Innovations                             ║
          ║                                                               ║
          ║  • Base: Arch Linux (Rolling Release)                        ║
          ║  • Desktop: Hyprland + end-4 dotfiles                        ║
          ║  • Security: BlackArch tools available                       ║
          ║                                                               ║
          ║  First boot will launch an interactive setup wizard          ║
          ║                                                               ║
          ╚═══════════════════════════════════════════════════════════════╝
          
          MOTD
              
              # Build ISO
              echo ""
              echo "═══════════════════════════════════════════════"
              echo "Building ISO with mkarchiso..."
              echo "═══════════════════════════════════════════════"
              
              mkarchiso -v -w /tmp/work -o /tmp/out .
              
              # Move to workspace
              mv /tmp/out/*.iso /workspace/${ISO_NAME}.iso
              
              echo ""
              echo "╔═══════════════════════════════════════════════╗"
              echo "║                                               ║"
              echo "║  ✨ Cybr Linux ISO created successfully! ✨   ║"
              echo "║                                               ║"
              echo "║  File: ${ISO_NAME}.iso                        ║"
              echo "║                                               ║"
              echo "╚═══════════════════════════════════════════════╝"
            '

      - name: "Validate ISO"
        id: validate
        run: |
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          
          if [[ ! -f "$ISO_FILE" ]]; then
            echo "ERROR: ISO not found"
            exit 1
          fi
          
          SIZE=$(stat -c%s "$ISO_FILE")
          SIZE_MB=$(( SIZE / 1024 / 1024 ))
          SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)
          
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          
          echo "ISO: $ISO_FILE"
          echo "Size: ${SIZE_MB} MB"
          echo "SHA256: $SHA256"

      - name: "Upload ISO"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ISO_NAME }}"
          path: "${{ env.ISO_NAME }}.iso"
          retention-days: 7

  upload:
    name: "Upload to SourceForge"
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
      - name: "Download ISO"
        uses: actions/download-artifact@v4
        with:
          name: "cybr-arch-v${{ github.run_number }}"

      - name: "Install Upload Tools"
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: "Upload to SourceForge"
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
        run: |
          if [[ -z "$SF_USER" || -z "$SF_PASS" ]]; then
            echo "SourceForge credentials not configured"
            exit 1
          fi
          
          ISO_FILE="cybr-arch-v${{ github.run_number }}.iso"
          REMOTE_PATH="/home/frs/project/wolfos/$ISO_FILE"
          
          echo "Uploading $ISO_FILE to SourceForge..."
          
          for i in {1..3}; do
            if timeout 1800 sshpass -p "$SF_PASS" \
              rsync -avP --progress \
              -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              "./$ISO_FILE" \
              "$SF_USER@frs.sourceforge.net:$REMOTE_PATH"; then
              echo "Upload completed successfully"
              break
            elif [[ $i -eq 3 ]]; then
              echo "Upload failed after 3 attempts"
              exit 1
            else
              echo "Upload attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          echo "ISO uploaded to SourceForge!"
          echo "Download: https://sourceforge.net/projects/wolfos/files/$ISO_FILE/download"

  notify:
    name: "Notify"
    runs-on: ubuntu-latest
    needs: [build, upload]
    if: always()
    
    steps:
      - name: "Summary"
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🌅 Cybr Linux - Build Summary
          
          **Dawn light shines upon the arches** - Build completed!
          
          ## ✨ Features
          
          ### Base System
          - **Distribution**: Arch Linux (rolling release)
          - **Kernel**: Latest Linux kernel
          - **Init System**: systemd
          
          ### Desktop Environment
          - **Window Manager**: Hyprland (Wayland)
          - **Dotfiles**: end-4's illogical-impulse configuration
          - **Shell**: AGS (Aylur's GTK Shell) for beautiful widgets
          - **Dock**: nwg-dock-hyprland with custom styling
          - **Status Bar**: Integrated with end-4 dotfiles
          - **Login Manager**: greetd with tuigreet
          
          ### Applications
          - **Terminal**: Kitty
          - **Browser**: Firefox
          - **File Manager**: Thunar with plugins
          - **Text Editor**: Mousepad
          - **System Monitor**: htop, btop
          - **System Info**: fastfetch
          
          ### Security Tools
          - **BlackArch**: Full repository access (2800+ tools)
          - **Penetration Testing**: Available via BlackArch
          - **Network Analysis**: Available via BlackArch
          
          ### Aesthetic Features
          - **Animations**: Smooth Hyprland animations
          - **Themes**: Dynamic color generation
          - **Widgets**: Beautiful AGS-powered widgets
          - **Dock**: Elegant bottom dock with auto-hide
          - **Wallpapers**: Dynamic wallpaper support
          - **Icons**: Material Design + Font Awesome
          - **Fonts**: JetBrains Mono Nerd Font
          
          ## 📥 Downloads
          
          - **Artifact**: [Download from workflow artifacts](../../actions/runs/${{ github.run_id }}#artifacts)
          - **SourceForge**: [Download from SourceForge](https://sourceforge.net/projects/wolfos/)
          
          ## 🚀 First Boot
          
          On first boot, an interactive setup wizard will:
          1. Install end-4's beautiful Hyprland dotfiles
          2. Configure nwg-dock-hyprland
          3. Setup BlackArch repositories
          4. Apply Neo system enhancements
          5. Configure the system for optimal aesthetics
          
          ## ⌨️ Default Keybinds
          
          - `Super + Q` - Close window
          - `Super + T` - Terminal
          - `Super + R` - App launcher
          - `Super + L` - Lock screen
          - `Super + Shift + Q` - Exit Hyprland
          - `Super + /` - Show all keybinds
          
          ## 🎨 Customization
          
          All configurations are in `~/.config/`:
          - `hypr/` - Hyprland configuration
          - `ags/` - AGS widget configuration
          - `nwg-dock-hyprland/` - Dock settings
          
          ---
          
          **Built with ❤️ by WolfTech Innovations**
          EOF