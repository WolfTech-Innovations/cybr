name: "Cybr NextGen Build System"

on:
  workflow_dispatch:
    inputs:
      build_variant:
        description: "Build variant"
        required: false
        default: "full"
        type: choice
        options: ["minimal", "standard", "full"]
      skip_upload:
        description: "Skip upload to SourceForge"
        required: false
        default: "false"
        type: boolean
  push:
    branches: [main, develop]
    paths: ['scripts/**', 'config/**', '.github/workflows/build.yml']
  schedule:
    - cron: '0 2 * * 0'

env:
  DOCKER_BUILDKIT: 1
  BUILD_VERSION: ${{ github.run_number }}
  ISO_NAME: "cybr-nextgen-v${{ github.run_number }}"

jobs:
  validate:
    name: "Pre-Build Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "Generate Build Hash"
        id: hash
        run: |
          HASH=$(echo "${{ github.sha }}-${{ github.event.inputs.build_variant }}-${{ github.run_number }}" | sha256sum | cut -d' ' -f1 | head -c 16)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Build Hash: $HASH"
          
      - name: "Validation Checks"
        id: check
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "Build Variant: ${{ github.event.inputs.build_variant || 'standard' }}"
          echo "Build Number: ${{ github.run_number }}"
          echo "Trigger: ${{ github.event_name }}"

  build:
    name: "Build Cybr OS"
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    timeout-minutes: 180
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      iso_size: ${{ steps.iso-info.outputs.size }}
      iso_sha256: ${{ steps.iso-info.outputs.sha256 }}
    
    steps:
      - name: "Maximize Build Space"
        run: |
          echo "Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          df -h

      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "Create Build Environment"
        run: |
          cat > Dockerfile << 'DOCKERFILE_EOF'
          FROM debian:bullseye-slim AS base
          
          RUN apt-get update && \
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                  git curl wget ca-certificates gnupg2 \
                  debootstrap syslinux-utils isolinux xorriso \
                  mtools rsync live-build \
                  nano sed gzip xz-utils bzip2 \
                  nasm gcc make \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          
          WORKDIR /build
          COPY scripts/ ./scripts/
          RUN find ./scripts -name "*.sh" -o -name "*.bash" | xargs chmod +x
          
          ENV DEBIAN_FRONTEND=noninteractive
          ENV LANG=C.UTF-8
          ENV LC_ALL=C.UTF-8
          DOCKERFILE_EOF

      - name: "Create Build Scripts Directory"
        run: mkdir -p scripts

      - name: "Generate User-Friendly Configuration"
        run: |
          cat > scripts/cybr-config.sh << 'CONFIG_EOF'
          #!/bin/bash
          set -euo pipefail
          
          # User-friendly OS configuration
          export DISTRO_NAME="Cybr NextGen"
          export DISTRO_VERSION="${{ env.BUILD_VERSION }}"
          export DISTRO_CODENAME="FriendlyWolf"
          export DEFAULT_USER="cybr"
          export DEFAULT_HOSTNAME="cybr-system"
          
          # Desktop environment for maximum user-friendliness
          export DESKTOP_ENV="plasma"
          export DISPLAY_MANAGER="sddm"
          
          # Build settings
          export BUILD_VARIANT="${{ github.event.inputs.build_variant || 'standard' }}"
          export ISO_NAME="${{ env.ISO_NAME }}"
          export USE_CALAMARES="true"
          export USE_CUSTOM_BOOTLOADER="true"
          
          echo "Cybr NextGen Configuration:"
          echo "  Name: $DISTRO_NAME"
          echo "  Version: $DISTRO_VERSION"
          echo "  Codename: $DISTRO_CODENAME"
          echo "  Desktop: $DESKTOP_ENV"
          echo "  Installer: Calamares"
          CONFIG_EOF
          chmod +x scripts/cybr-config.sh

      - name: "Create Package Lists"
        run: |
          mkdir -p config/package-lists
          
          # Base user-friendly packages
          cat > config/package-lists/base.list.chroot << 'PKG_EOF'
          # System essentials
          sudo nano vim curl wget git
          openssh-client
          network-manager
          
          # Security (minimal as requested)
          ufw gufw
          clamav clamav-daemon clamav-freshclam
          
          # User-friendly utilities
          htop neofetch tree
          firefox-esr thunderbird
          libreoffice
          vlc gimp
          file-roller
          synaptic gdebi
          
          # Hardware support
          firmware-linux firmware-linux-nonfree
          firmware-misc-nonfree
          
          # Multimedia codecs
          gstreamer1.0-plugins-base
          gstreamer1.0-plugins-good
          gstreamer1.0-plugins-bad
          gstreamer1.0-plugins-ugly
          gstreamer1.0-libav
          PKG_EOF
          
          # Desktop environment
          cat > config/package-lists/desktop.list.chroot << 'DESK_PKG_EOF'
          # KDE Plasma (most user-friendly)
          plasma-desktop
          plasma-workspace
          plasma-nm
          kde-spectacle
          dolphin
          konsole
          kate
          ark
          okular
          gwenview
          
          # Display manager
          sddm sddm-theme-breeze
          
          # Additional user-friendly tools
          discover
          systemsettings
          kde-config-gtk-style
          PKG_EOF
          
          # Calamares installer
          cat > config/package-lists/installer.list.chroot << 'INST_PKG_EOF'
          # Calamares installer
          calamares
          calamares-settings-debian
          PKG_EOF    

      - name: "Execute ISO Build"
        run: |
          docker build -t cybr-builder:${{ needs.validate.outputs.build_hash }} .
          
          docker run --rm \
            --privileged \
            --tmpfs /tmp:exec \
            -v $PWD:/build \
            -e BUILD_VARIANT="${{ github.event.inputs.build_variant || 'standard' }}" \
            cybr-builder:${{ needs.validate.outputs.build_hash }} \
            bash -c "
              set -euo pipefail
              
              source ./scripts/cybr-config.sh
              
              # Create live-build configuration
              mkdir -p cybr-build
              cd cybr-build
              
              lb config \
                --distribution bullseye \
                --archive-areas 'main contrib non-free' \
                --architectures amd64 \
                --linux-flavours amd64 \
                --debian-installer false \
                
                --bootappend-live 'boot=live components hostname=\$DEFAULT_HOSTNAME username=\$DEFAULT_USER' \
                --bootloaders 'syslinux' \
                --compression xz \
                --zsync false \
                --iso-application '\$DISTRO_NAME' \
                --iso-publisher 'WolfTech Innovations' \
                --iso-volume '\$DISTRO_NAME \$DISTRO_VERSION' \
                --image-name '\$ISO_NAME'
              
              # Copy package lists
              cp -r /build/config/package-lists config/ || true
              
              # Create branding and user-friendly hooks
              mkdir -p config/hooks/normal
              
              cat > config/hooks/normal/0010-cybr-branding.hook.chroot << 'BRAND_EOF'
          #!/bin/bash
          set -e
          
          echo 'Setting up Cybr NextGen branding...'
          
          # Update system identification
          cat > /etc/os-release << OS_EOF
          PRETTY_NAME=\"Cybr NextGen (Friendly Wolf)\"
          NAME=\"Cybr NextGen\"
          VERSION_ID=\"\$DISTRO_VERSION\"
          VERSION=\"\$DISTRO_VERSION (Friendly Wolf)\"
          VERSION_CODENAME=\"friendlywolf\"
          ID=cybr
          ID_LIKE=debian
          HOME_URL=\"https://wolfos.pages.dev"

          OS_EOF
          
          # Create friendly welcome message
          cat > /etc/motd << MOTD_EOF
          
          Welcome to Cybr NextGen - The Most User-Friendly Security OS!
          
          This system is designed to be so easy that anyone can use it.
          
          Getting Started:
          - Open the application menu to find all your programs
          - The system comes with essential security tools pre-installed
          - Use the System Settings to customize your experience
          - Check the desktop for quick-start guides
          
          Need help? Check out our documentation or community forums.
          
          MOTD_EOF
          
          echo 'Cybr NextGen branding applied successfully'
          BRAND_EOF
              chmod 755 config/hooks/normal/0010-cybr-branding.hook.chroot
              
              cat > config/hooks/normal/0020-user-friendly-setup.hook.chroot << 'FRIENDLY_EOF'
          #!/bin/bash
          set -e
          
          echo 'Setting up user-friendly environment...'
          
          # Configure automatic login for live session
          mkdir -p /etc/sddm.conf.d
          cat > /etc/sddm.conf.d/autologin.conf << SDDM_EOF
          [Autologin]
          User=\$DEFAULT_USER
          Session=plasma.desktop
          SDDM_EOF
          
          # Create desktop shortcuts for common tasks
          mkdir -p /home/\$DEFAULT_USER/Desktop
          
          cat > /home/\$DEFAULT_USER/Desktop/Install-System.desktop << INSTALL_EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Install Cybr NextGen
          Comment=Install this system to your computer
          Exec=calamares
          Icon=system-software-install
          Terminal=false
          Categories=System;
          INSTALL_EOF
          
          cat > /home/\$DEFAULT_USER/Desktop/Welcome-Guide.desktop << GUIDE_EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Welcome Guide
          Comment=Learn how to use your new system
          Exec=firefox /usr/share/doc/cybr-welcome/index.html
          Icon=help-contents
          Terminal=false
          Categories=Documentation;
          GUIDE_EOF
          
          # Set proper ownership
          chown -R \$DEFAULT_USER:\$DEFAULT_USER /home/\$DEFAULT_USER/Desktop
          chmod +x /home/\$DEFAULT_USER/Desktop/*.desktop
          
          # Configure Calamares for user-friendly installation
          mkdir -p /etc/calamares
          cat > /etc/calamares/settings.conf << CALAMARES_EOF
          modules-search: [ local ]
          instances:
          - id: before
            module: shellprocess
            config: shellprocess_before.conf
          - id: after
            module: shellprocess
            config: shellprocess_after.conf
          
          sequence:
          - show:
            - welcome
            - locale
            - keyboard
            - partition
            - users
            - summary
          - exec:
            - partition
            - mount
            - unpackfs
            - sources-media
            - shellprocess@before
            - users
            - displaymanager
            - networkcfg
            - hwclock
            - services-systemd
            - shellprocess@after
            - umount
          - show:
            - finished
          
          branding: cybr
          prompt-install: false
          dont-chroot: false
          disable-cancel: false
          disable-cancel-during-exec: false
          hide-back-and-next-during-exec: false
          quit-at-end: false
          CALAMARES_EOF
          
          echo 'User-friendly setup completed'
          FRIENDLY_EOF
              chmod 755 config/hooks/normal/0020-user-friendly-setup.hook.chroot
              
              cat > config/hooks/normal/0030-security-minimal.hook.chroot << 'SEC_EOF'
          #!/bin/bash
          set -e
          
          echo 'Setting up minimal security tools...'
          
          # Configure firewall (user-friendly)
          ufw --force enable
          ufw default deny incoming
          ufw default allow outgoing
          
          # Configure ClamAV
          freshclam || true
          systemctl enable clamav-freshclam || true
          
          # Create security dashboard desktop shortcut
          cat > /home/\$DEFAULT_USER/Desktop/Security-Center.desktop << SEC_DESK_EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=Security Center
          Comment=Manage your system security
          Exec=gufw
          Icon=security-high
          Terminal=false
          Categories=System;Security;
          SEC_DESK_EOF
          
          chown \$DEFAULT_USER:\$DEFAULT_USER /home/\$DEFAULT_USER/Desktop/Security-Center.desktop
          chmod +x /home/\$DEFAULT_USER/Desktop/Security-Center.desktop
          
          echo 'Minimal security setup completed'
          SEC_EOF
              chmod 755 config/hooks/normal/0030-security-minimal.hook.chroot
              
              echo 'Starting live-build process...'
              timeout 7200 lb build || {
                echo 'Build failed or timed out'
                ls -la || true
                exit 1
              }
              
              # Find and copy the ISO
              ISO_PATH=\$(find . -name '*.iso' -type f | head -1)
              if [[ -n \"\$ISO_PATH\" && -f \"\$ISO_PATH\" ]]; then
                cp \"\$ISO_PATH\" \"/build/\$ISO_NAME.iso\"
                echo 'ISO build completed successfully'
                ls -lh \"/build/\$ISO_NAME.iso\"
              else
                echo 'ERROR: ISO file not found'
                exit 1
              fi
            "

      - name: "Validate ISO Build"
        id: iso-info
        run: |
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          
          if [[ ! -f "$ISO_FILE" ]]; then
            echo "ERROR: ISO file not found: $ISO_FILE"
            exit 1
          fi
          
          SIZE=$(stat -c%s "$ISO_FILE")
          SIZE_MB=$(( SIZE / 1024 / 1024 ))
          SHA256=$(sha256sum "$ISO_FILE" | cut -d' ' -f1)
          
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          
          echo "ISO Build Summary:"
          echo "  File: $ISO_FILE"
          echo "  Size: ${SIZE_MB} MB"
          echo "  SHA256: $SHA256"

      - name: "Set Build Status"
        id: build-status
        run: |
          echo "success=true" >> $GITHUB_OUTPUT
          echo "Build completed successfully"

      - name: "Upload ISO Artifact"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "${{ env.ISO_NAME }}"
          path: "${{ env.ISO_NAME }}.iso"
          retention-days: 7
          compression-level: 0

  upload:
    name: "Upload to SourceForge"
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: |
      needs.build.outputs.build_success == 'true' && 
      github.event.inputs.skip_upload != 'true' &&
      (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
    timeout-minutes: 30
    
    steps:
      - name: "Download ISO Artifact"
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.ISO_NAME }}"

      - name: "Install Upload Dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: "Upload to SourceForge"
        env:
          SF_USER: ${{ secrets.SF_USER }}
          SF_PASS: ${{ secrets.SF_PASS }}
        run: |
          if [[ -z "$SF_USER" || -z "$SF_PASS" ]]; then
            echo "SourceForge credentials not configured"
            exit 1
          fi
          
          ISO_FILE="${{ env.ISO_NAME }}.iso"
          REMOTE_PATH="/home/frs/project/cybr-nextgen/$ISO_FILE"
          
          echo "Uploading $ISO_FILE to SourceForge..."
          
          for i in {1..3}; do
            if timeout 1800 sshpass -p "$SF_PASS" \
              rsync -avP --progress \
              -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              "./$ISO_FILE" \
              "$SF_USER@frs.sourceforge.net:$REMOTE_PATH"; then
              echo "Upload completed successfully"
              break
            elif [[ $i -eq 3 ]]; then
              echo "Upload failed after 3 attempts"
              exit 1
            else
              echo "Upload attempt $i failed, retrying..."
              sleep 30
            fi
          done
          
          echo "ISO successfully uploaded to SourceForge!"

  notify:
    name: "Send Notifications"
    runs-on: ubuntu-latest
    needs: [validate, build, upload]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: "Create Summary"
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY_EOF'
          # Cybr NextGen Build Summary
          
          ## Build Results
          
          | Component | Status |
          |-----------|--------|
          | **Build** | ${{ (needs.build.outputs.build_success == 'true' && 'Success') || 'Failed' }} |
          | **Upload** | ${{ (needs.upload.result == 'success' && 'Success') || (needs.upload.result == 'skipped' && 'Skipped') || 'Failed' }} |
          
          ## ISO Details
          
          | Property | Value |
          |----------|-------|
          | **Filename** | `${{ env.ISO_NAME }}.iso` |
          | **Size** | `${{ needs.build.outputs.iso_size || 'N/A' }} bytes` |
          | **SHA256** | `${{ needs.build.outputs.iso_sha256 || 'N/A' }}` |
          | **Variant** | `${{ github.event.inputs.build_variant || 'standard' }}` |
          
          ## User-Friendly Features
          
          - KDE Plasma desktop environment (most intuitive)
          - Calamares installer for easy installation
          - Pre-configured security tools (firewall + antivirus)
          - Desktop shortcuts for common tasks
          - Automatic hardware detection
          - Multimedia codecs included
          - Welcome guide for new users
          
          ${{ (needs.build.outputs.build_success == 'true' && '- [Download ISO Artifact](../../actions/runs/${{ github.run_id }}#artifacts)') || '' }}
          
          ---
          
          *Built with Cybr NextGen Build System - Designed for maximum user-friendliness*
          SUMMARY_EOF

  cleanup:
    name: "Cleanup Resources"
    runs-on: ubuntu-latest
    needs: [build, upload, notify]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: "Free Up Resources"
        run: |
          echo "Cleaning up build artifacts..."
          docker system prune -af || true
          sudo apt-get clean || true
          echo "Cleanup completed"
          df -h